/* automatically generated by rust-bindgen 0.58.1 */
#![allow(deref_nullptr)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]
#![allow(improper_ctypes)]

pub const ONI_PLATFORM_WIN32: u32 = 1;
pub const ONI_PLATFORM_LINUX_X86: u32 = 2;
pub const ONI_PLATFORM_LINUX_ARM: u32 = 3;
pub const ONI_PLATFORM_MACOSX: u32 = 4;
pub const ONI_PLATFORM_ANDROID_ARM: u32 = 5;
pub const _UNISTD_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _GLIBCXX_STDLIB_H: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 11;
pub const __GLIBCXX__: u32 = 20210427;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const CHAR_WIDTH: u32 = 8;
pub const SCHAR_WIDTH: u32 = 8;
pub const UCHAR_WIDTH: u32 = 8;
pub const SHRT_WIDTH: u32 = 16;
pub const USHRT_WIDTH: u32 = 16;
pub const INT_WIDTH: u32 = 32;
pub const UINT_WIDTH: u32 = 32;
pub const LONG_WIDTH: u32 = 64;
pub const ULONG_WIDTH: u32 = 64;
pub const LLONG_WIDTH: u32 = 64;
pub const ULLONG_WIDTH: u32 = 64;
pub const BOOL_MAX: u32 = 1;
pub const BOOL_WIDTH: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_FD_SETSIZE: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_QLIMIT: u32 = 1;
pub const _POSIX_HIWAT: u32 = 512;
pub const _POSIX_UIO_MAXIOV: u32 = 16;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _XOPEN_LIM_H: u32 = 1;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const IOV_MAX: u32 = 1024;
pub const NL_ARGMAX: u32 = 4096;
pub const NL_LANGMAX: u32 = 2048;
pub const NZERO: u32 = 20;
pub const WORD_BIT: u32 = 32;
pub const LONG_BIT: u32 = 64;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const ONI_PLATFORM: u32 = 2;
pub const ONI_PLATFORM_STRING: &'static [u8; 10usize] = b"Linux-x86\0";
pub const ONI_PLATFORM_SUPPORTS_DYNAMIC_LIBS: u32 = 1;
pub const ONI_DEFAULT_MEM_ALIGN: u32 = 16;
pub const ONI_FILE_MAX_PATH: u32 = 256;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const ONI_MAX_STR: u32 = 256;
pub const ONI_MAX_SENSORS: u32 = 10;
pub const ONI_VERSION_MAJOR: u32 = 2;
pub const ONI_VERSION_MINOR: u32 = 2;
pub const ONI_VERSION_MAINTENANCE: u32 = 0;
pub const ONI_VERSION_BUILD: u32 = 10;
pub const ONI_VERSION: u32 = 202000010;
pub const NITE_JOINT_COUNT: u32 = 15;
pub const NITE_POSE_COUNT: u32 = 2;
pub const NITE_VERSION_MAJOR: u32 = 2;
pub const NITE_VERSION_MINOR: u32 = 2;
pub const NITE_VERSION_MAINTENANCE: u32 = 0;
pub const NITE_VERSION_BUILD: u32 = 5;
pub const NITE_VERSION: u32 = 202000005;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type ssize_t = __ssize_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn euidaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn lseek64(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread64(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off64_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite64(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off64_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe2(
        __pipedes: *mut ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_current_dir_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup3(
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvpe(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn group_member(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresuid(
        __ruid: *mut __uid_t,
        __euid: *mut __uid_t,
        __suid: *mut __uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresgid(
        __rgid: *mut __gid_t,
        __egid: *mut __gid_t,
        __sgid: *mut __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresuid(__ruid: __uid_t, __euid: __uid_t, __suid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresgid(__rgid: __gid_t, __egid: __gid_t, __sgid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> __pid_t;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syncfs(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate64(
        __file: *const ::std::os::raw::c_char,
        __length: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate64(__fd: ::std::os::raw::c_int, __length: __off64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf64(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_file_range(
        __infd: ::std::os::raw::c_int,
        __pinoff: *mut __off64_t,
        __outfd: ::std::os::raw::c_int,
        __poutoff: *mut __off64_t,
        __length: size_t,
        __flags: ::std::os::raw::c_uint,
    ) -> ssize_t;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        __from: *const ::std::os::raw::c_void,
        __to: *mut ::std::os::raw::c_void,
        __n: ssize_t,
    );
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettid() -> __pid_t;
}
pub type std_size_t = ::std::os::raw::c_ulong;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: size_t) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __s: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn strpbrk(
        __s: *mut ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: size_t,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrordesc_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrorname_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigabbrev_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigdescr_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const OniStatus_ONI_STATUS_OK: OniStatus = 0;
pub const OniStatus_ONI_STATUS_ERROR: OniStatus = 1;
pub const OniStatus_ONI_STATUS_NOT_IMPLEMENTED: OniStatus = 2;
pub const OniStatus_ONI_STATUS_NOT_SUPPORTED: OniStatus = 3;
pub const OniStatus_ONI_STATUS_BAD_PARAMETER: OniStatus = 4;
pub const OniStatus_ONI_STATUS_OUT_OF_FLOW: OniStatus = 5;
pub const OniStatus_ONI_STATUS_NO_DEVICE: OniStatus = 6;
pub const OniStatus_ONI_STATUS_TIME_OUT: OniStatus = 102;
#[doc = " Possible failure values"]
pub type OniStatus = ::std::os::raw::c_uint;
pub const OniSensorType_ONI_SENSOR_IR: OniSensorType = 1;
pub const OniSensorType_ONI_SENSOR_COLOR: OniSensorType = 2;
pub const OniSensorType_ONI_SENSOR_DEPTH: OniSensorType = 3;
#[doc = " The source of the stream"]
pub type OniSensorType = ::std::os::raw::c_uint;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_DEPTH_1_MM: OniPixelFormat = 100;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_DEPTH_100_UM: OniPixelFormat = 101;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_SHIFT_9_2: OniPixelFormat = 102;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_SHIFT_9_3: OniPixelFormat = 103;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_RGB888: OniPixelFormat = 200;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_YUV422: OniPixelFormat = 201;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_GRAY8: OniPixelFormat = 202;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_GRAY16: OniPixelFormat = 203;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_JPEG: OniPixelFormat = 204;
pub const OniPixelFormat_ONI_PIXEL_FORMAT_YUYV: OniPixelFormat = 205;
#[doc = " All available formats of the output of a stream"]
pub type OniPixelFormat = ::std::os::raw::c_uint;
pub const OniDeviceState_ONI_DEVICE_STATE_OK: OniDeviceState = 0;
pub const OniDeviceState_ONI_DEVICE_STATE_ERROR: OniDeviceState = 1;
pub const OniDeviceState_ONI_DEVICE_STATE_NOT_READY: OniDeviceState = 2;
pub const OniDeviceState_ONI_DEVICE_STATE_EOF: OniDeviceState = 3;
pub type OniDeviceState = ::std::os::raw::c_uint;
pub const OniImageRegistrationMode_ONI_IMAGE_REGISTRATION_OFF: OniImageRegistrationMode = 0;
pub const OniImageRegistrationMode_ONI_IMAGE_REGISTRATION_DEPTH_TO_COLOR: OniImageRegistrationMode =
    1;
pub type OniImageRegistrationMode = ::std::os::raw::c_uint;
pub const ONI_TIMEOUT_NONE: ::std::os::raw::c_int = 0;
pub const ONI_TIMEOUT_FOREVER: ::std::os::raw::c_int = -1;
#[doc = " Basic types"]
pub type OniBool = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniCallbackHandleImpl {
    _unused: [u8; 0],
}
pub type OniCallbackHandle = *mut OniCallbackHandleImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniVersion {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub maintenance: ::std::os::raw::c_int,
    pub build: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OniVersion() {
    assert_eq!(
        ::std::mem::size_of::<OniVersion>(),
        16usize,
        concat!("Size of: ", stringify!(OniVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<OniVersion>(),
        4usize,
        concat!("Alignment of ", stringify!(OniVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVersion>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVersion),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVersion>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVersion),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVersion>())).maintenance as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVersion),
            "::",
            stringify!(maintenance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVersion>())).build as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVersion),
            "::",
            stringify!(build)
        )
    );
}
pub type OniHardwareVersion = ::std::os::raw::c_int;
#[doc = " Description of the output: format and resolution"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniVideoMode {
    pub pixelFormat: OniPixelFormat,
    pub resolutionX: ::std::os::raw::c_int,
    pub resolutionY: ::std::os::raw::c_int,
    pub fps: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OniVideoMode() {
    assert_eq!(
        ::std::mem::size_of::<OniVideoMode>(),
        16usize,
        concat!("Size of: ", stringify!(OniVideoMode))
    );
    assert_eq!(
        ::std::mem::align_of::<OniVideoMode>(),
        4usize,
        concat!("Alignment of ", stringify!(OniVideoMode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVideoMode>())).pixelFormat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVideoMode),
            "::",
            stringify!(pixelFormat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVideoMode>())).resolutionX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVideoMode),
            "::",
            stringify!(resolutionX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVideoMode>())).resolutionY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVideoMode),
            "::",
            stringify!(resolutionY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniVideoMode>())).fps as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OniVideoMode),
            "::",
            stringify!(fps)
        )
    );
}
#[doc = " List of supported video modes by a specific source"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniSensorInfo {
    pub sensorType: OniSensorType,
    pub numSupportedVideoModes: ::std::os::raw::c_int,
    pub pSupportedVideoModes: *mut OniVideoMode,
}
#[test]
fn bindgen_test_layout_OniSensorInfo() {
    assert_eq!(
        ::std::mem::size_of::<OniSensorInfo>(),
        16usize,
        concat!("Size of: ", stringify!(OniSensorInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<OniSensorInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(OniSensorInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniSensorInfo>())).sensorType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniSensorInfo),
            "::",
            stringify!(sensorType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OniSensorInfo>())).numSupportedVideoModes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OniSensorInfo),
            "::",
            stringify!(numSupportedVideoModes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OniSensorInfo>())).pSupportedVideoModes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OniSensorInfo),
            "::",
            stringify!(pSupportedVideoModes)
        )
    );
}
#[doc = " Basic description of a device"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OniDeviceInfo {
    pub uri: [::std::os::raw::c_char; 256usize],
    pub vendor: [::std::os::raw::c_char; 256usize],
    pub name: [::std::os::raw::c_char; 256usize],
    pub usbVendorId: u16,
    pub usbProductId: u16,
}
#[test]
fn bindgen_test_layout_OniDeviceInfo() {
    assert_eq!(
        ::std::mem::size_of::<OniDeviceInfo>(),
        772usize,
        concat!("Size of: ", stringify!(OniDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<OniDeviceInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(OniDeviceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniDeviceInfo>())).uri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceInfo),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniDeviceInfo>())).vendor as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceInfo),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniDeviceInfo>())).name as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniDeviceInfo>())).usbVendorId as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceInfo),
            "::",
            stringify!(usbVendorId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniDeviceInfo>())).usbProductId as *const _ as usize },
        770usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceInfo),
            "::",
            stringify!(usbProductId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OniDevice {
    _unused: [u8; 0],
}
pub type OniDeviceHandle = *mut _OniDevice;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OniStream {
    _unused: [u8; 0],
}
pub type OniStreamHandle = *mut _OniStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OniRecorder {
    _unused: [u8; 0],
}
pub type OniRecorderHandle = *mut _OniRecorder;
#[doc = " All information of the current frame"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniFrame {
    pub dataSize: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub sensorType: OniSensorType,
    pub timestamp: u64,
    pub frameIndex: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub videoMode: OniVideoMode,
    pub croppingEnabled: OniBool,
    pub cropOriginX: ::std::os::raw::c_int,
    pub cropOriginY: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OniFrame() {
    assert_eq!(
        ::std::mem::size_of::<OniFrame>(),
        80usize,
        concat!("Size of: ", stringify!(OniFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<OniFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(OniFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).dataSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).sensorType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(sensorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).timestamp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).frameIndex as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(frameIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).width as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).height as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).videoMode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(videoMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).croppingEnabled as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(croppingEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).cropOriginX as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(cropOriginX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).cropOriginY as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(cropOriginY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniFrame>())).stride as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OniFrame),
            "::",
            stringify!(stride)
        )
    );
}
pub type OniNewFrameCallback = ::std::option::Option<
    unsafe extern "C" fn(stream: OniStreamHandle, pCookie: *mut ::std::os::raw::c_void),
>;
pub type OniGeneralCallback =
    ::std::option::Option<unsafe extern "C" fn(pCookie: *mut ::std::os::raw::c_void)>;
pub type OniDeviceInfoCallback = ::std::option::Option<
    unsafe extern "C" fn(pInfo: *const OniDeviceInfo, pCookie: *mut ::std::os::raw::c_void),
>;
pub type OniDeviceStateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pInfo: *const OniDeviceInfo,
        deviceState: OniDeviceState,
        pCookie: *mut ::std::os::raw::c_void,
    ),
>;
pub type OniFrameAllocBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_int,
        pCookie: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type OniFrameFreeBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, pCookie: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniDeviceCallbacks {
    pub deviceConnected: OniDeviceInfoCallback,
    pub deviceDisconnected: OniDeviceInfoCallback,
    pub deviceStateChanged: OniDeviceStateCallback,
}
#[test]
fn bindgen_test_layout_OniDeviceCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<OniDeviceCallbacks>(),
        24usize,
        concat!("Size of: ", stringify!(OniDeviceCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<OniDeviceCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(OniDeviceCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OniDeviceCallbacks>())).deviceConnected as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceCallbacks),
            "::",
            stringify!(deviceConnected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OniDeviceCallbacks>())).deviceDisconnected as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceCallbacks),
            "::",
            stringify!(deviceDisconnected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OniDeviceCallbacks>())).deviceStateChanged as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OniDeviceCallbacks),
            "::",
            stringify!(deviceStateChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniCropping {
    pub enabled: ::std::os::raw::c_int,
    pub originX: ::std::os::raw::c_int,
    pub originY: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OniCropping() {
    assert_eq!(
        ::std::mem::size_of::<OniCropping>(),
        20usize,
        concat!("Size of: ", stringify!(OniCropping))
    );
    assert_eq!(
        ::std::mem::align_of::<OniCropping>(),
        4usize,
        concat!("Alignment of ", stringify!(OniCropping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniCropping>())).enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniCropping),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniCropping>())).originX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OniCropping),
            "::",
            stringify!(originX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniCropping>())).originY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OniCropping),
            "::",
            stringify!(originY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniCropping>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OniCropping),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniCropping>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OniCropping),
            "::",
            stringify!(height)
        )
    );
}
#[doc = "Pixel type used to store depth images."]
pub type OniDepthPixel = u16;
#[doc = "Pixel type used to store 16-bit grayscale images"]
pub type OniGrayscale16Pixel = u16;
#[doc = "Pixel type used to store 8-bit grayscale/bayer images"]
pub type OniGrayscale8Pixel = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniRGB888Pixel {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}
#[test]
fn bindgen_test_layout_OniRGB888Pixel() {
    assert_eq!(
        ::std::mem::size_of::<OniRGB888Pixel>(),
        3usize,
        concat!("Size of: ", stringify!(OniRGB888Pixel))
    );
    assert_eq!(
        ::std::mem::align_of::<OniRGB888Pixel>(),
        1usize,
        concat!("Alignment of ", stringify!(OniRGB888Pixel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniRGB888Pixel>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniRGB888Pixel),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniRGB888Pixel>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(OniRGB888Pixel),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniRGB888Pixel>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(OniRGB888Pixel),
            "::",
            stringify!(b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniYUV422DoublePixel {
    pub u: u8,
    pub y1: u8,
    pub v: u8,
    pub y2: u8,
}
#[test]
fn bindgen_test_layout_OniYUV422DoublePixel() {
    assert_eq!(
        ::std::mem::size_of::<OniYUV422DoublePixel>(),
        4usize,
        concat!("Size of: ", stringify!(OniYUV422DoublePixel))
    );
    assert_eq!(
        ::std::mem::align_of::<OniYUV422DoublePixel>(),
        1usize,
        concat!("Alignment of ", stringify!(OniYUV422DoublePixel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniYUV422DoublePixel>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniYUV422DoublePixel),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniYUV422DoublePixel>())).y1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(OniYUV422DoublePixel),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniYUV422DoublePixel>())).v as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(OniYUV422DoublePixel),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniYUV422DoublePixel>())).y2 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(OniYUV422DoublePixel),
            "::",
            stringify!(y2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OniSeek {
    pub frameIndex: ::std::os::raw::c_int,
    pub stream: OniStreamHandle,
}
#[test]
fn bindgen_test_layout_OniSeek() {
    assert_eq!(
        ::std::mem::size_of::<OniSeek>(),
        16usize,
        concat!("Size of: ", stringify!(OniSeek))
    );
    assert_eq!(
        ::std::mem::align_of::<OniSeek>(),
        8usize,
        concat!("Alignment of ", stringify!(OniSeek))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniSeek>())).frameIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OniSeek),
            "::",
            stringify!(frameIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OniSeek>())).stream as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OniSeek),
            "::",
            stringify!(stream)
        )
    );
}
pub const ONI_DEVICE_PROPERTY_FIRMWARE_VERSION: ::std::os::raw::c_uint = 0;
pub const ONI_DEVICE_PROPERTY_DRIVER_VERSION: ::std::os::raw::c_uint = 1;
pub const ONI_DEVICE_PROPERTY_HARDWARE_VERSION: ::std::os::raw::c_uint = 2;
pub const ONI_DEVICE_PROPERTY_SERIAL_NUMBER: ::std::os::raw::c_uint = 3;
pub const ONI_DEVICE_PROPERTY_ERROR_STATE: ::std::os::raw::c_uint = 4;
pub const ONI_DEVICE_PROPERTY_IMAGE_REGISTRATION: ::std::os::raw::c_uint = 5;
pub const ONI_DEVICE_PROPERTY_PLAYBACK_SPEED: ::std::os::raw::c_uint = 100;
pub const ONI_DEVICE_PROPERTY_PLAYBACK_REPEAT_ENABLED: ::std::os::raw::c_uint = 101;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const ONI_STREAM_PROPERTY_CROPPING: ::std::os::raw::c_uint = 0;
pub const ONI_STREAM_PROPERTY_HORIZONTAL_FOV: ::std::os::raw::c_uint = 1;
pub const ONI_STREAM_PROPERTY_VERTICAL_FOV: ::std::os::raw::c_uint = 2;
pub const ONI_STREAM_PROPERTY_VIDEO_MODE: ::std::os::raw::c_uint = 3;
pub const ONI_STREAM_PROPERTY_MAX_VALUE: ::std::os::raw::c_uint = 4;
pub const ONI_STREAM_PROPERTY_MIN_VALUE: ::std::os::raw::c_uint = 5;
pub const ONI_STREAM_PROPERTY_STRIDE: ::std::os::raw::c_uint = 6;
pub const ONI_STREAM_PROPERTY_MIRRORING: ::std::os::raw::c_uint = 7;
pub const ONI_STREAM_PROPERTY_NUMBER_OF_FRAMES: ::std::os::raw::c_uint = 8;
pub const ONI_STREAM_PROPERTY_AUTO_WHITE_BALANCE: ::std::os::raw::c_uint = 100;
pub const ONI_STREAM_PROPERTY_AUTO_EXPOSURE: ::std::os::raw::c_uint = 101;
pub const ONI_STREAM_PROPERTY_EXPOSURE: ::std::os::raw::c_uint = 102;
pub const ONI_STREAM_PROPERTY_GAIN: ::std::os::raw::c_uint = 103;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const ONI_DEVICE_COMMAND_SEEK: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = "  Initialize OpenNI2. Use ONI_API_VERSION as the version."]
    pub fn oniInitialize(apiVersion: ::std::os::raw::c_int) -> OniStatus;
}
extern "C" {
    #[doc = "  Shutdown OpenNI2"]
    pub fn oniShutdown();
}
extern "C" {
    #[doc = " Get the list of currently connected device."]
    #[doc = " Each device is represented by its OniDeviceInfo."]
    #[doc = " pDevices will be allocated inside."]
    pub fn oniGetDeviceList(
        pDevices: *mut *mut OniDeviceInfo,
        pNumDevices: *mut ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Release previously allocated device list"]
    pub fn oniReleaseDeviceList(pDevices: *mut OniDeviceInfo) -> OniStatus;
}
extern "C" {
    pub fn oniRegisterDeviceCallbacks(
        pCallbacks: *mut OniDeviceCallbacks,
        pCookie: *mut ::std::os::raw::c_void,
        pHandle: *mut OniCallbackHandle,
    ) -> OniStatus;
}
extern "C" {
    pub fn oniUnregisterDeviceCallbacks(handle: OniCallbackHandle);
}
extern "C" {
    #[doc = " Wait for any of the streams to have a new frame"]
    pub fn oniWaitForAnyStream(
        pStreams: *mut OniStreamHandle,
        numStreams: ::std::os::raw::c_int,
        pStreamIndex: *mut ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Get the current version of OpenNI2"]
    pub fn oniGetVersion() -> OniVersion;
}
extern "C" {
    #[doc = " Translate from format to number of bytes per pixel. Will return 0 for formats in which the number of bytes per pixel isn't fixed."]
    pub fn oniFormatBytesPerPixel(format: OniPixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get internal error"]
    pub fn oniGetExtendedError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Open a device. Uri can be taken from the matching OniDeviceInfo."]
    pub fn oniDeviceOpen(
        uri: *const ::std::os::raw::c_char,
        pDevice: *mut OniDeviceHandle,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Close a device"]
    pub fn oniDeviceClose(device: OniDeviceHandle) -> OniStatus;
}
extern "C" {
    #[doc = " Get the possible configurations available for a specific source, or NULL if the source does not exist."]
    pub fn oniDeviceGetSensorInfo(
        device: OniDeviceHandle,
        sensorType: OniSensorType,
    ) -> *const OniSensorInfo;
}
extern "C" {
    #[doc = " Get the OniDeviceInfo of a certain device."]
    pub fn oniDeviceGetInfo(device: OniDeviceHandle, pInfo: *mut OniDeviceInfo) -> OniStatus;
}
extern "C" {
    #[doc = " Create a new stream in the device. The stream will originate from the source."]
    pub fn oniDeviceCreateStream(
        device: OniDeviceHandle,
        sensorType: OniSensorType,
        pStream: *mut OniStreamHandle,
    ) -> OniStatus;
}
extern "C" {
    pub fn oniDeviceEnableDepthColorSync(device: OniDeviceHandle) -> OniStatus;
}
extern "C" {
    pub fn oniDeviceDisableDepthColorSync(device: OniDeviceHandle);
}
extern "C" {
    pub fn oniDeviceGetDepthColorSyncEnabled(device: OniDeviceHandle) -> OniBool;
}
extern "C" {
    #[doc = " Set property in the device. Use the properties listed in OniTypes.h: ONI_DEVICE_PROPERTY_..., or specific ones supplied by the device."]
    pub fn oniDeviceSetProperty(
        device: OniDeviceHandle,
        propertyId: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        dataSize: ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Get property in the device. Use the properties listed in OniTypes.h: ONI_DEVICE_PROPERTY_..., or specific ones supplied by the device."]
    pub fn oniDeviceGetProperty(
        device: OniDeviceHandle,
        propertyId: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        pDataSize: *mut ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Check if the property is supported by the device. Use the properties listed in OniTypes.h: ONI_DEVICE_PROPERTY_..., or specific ones supplied by the device."]
    pub fn oniDeviceIsPropertySupported(
        device: OniDeviceHandle,
        propertyId: ::std::os::raw::c_int,
    ) -> OniBool;
}
extern "C" {
    #[doc = " Invoke an internal functionality of the device."]
    pub fn oniDeviceInvoke(
        device: OniDeviceHandle,
        commandId: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        dataSize: ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Check if a command is supported, for invoke"]
    pub fn oniDeviceIsCommandSupported(
        device: OniDeviceHandle,
        commandId: ::std::os::raw::c_int,
    ) -> OniBool;
}
extern "C" {
    pub fn oniDeviceIsImageRegistrationModeSupported(
        device: OniDeviceHandle,
        mode: OniImageRegistrationMode,
    ) -> OniBool;
}
extern "C" {
    #[doc = " Destroy an existing stream"]
    pub fn oniStreamDestroy(stream: OniStreamHandle);
}
extern "C" {
    #[doc = " Get the OniSensorInfo of the certain stream."]
    pub fn oniStreamGetSensorInfo(stream: OniStreamHandle) -> *const OniSensorInfo;
}
extern "C" {
    #[doc = " Start generating data from the stream."]
    pub fn oniStreamStart(stream: OniStreamHandle) -> OniStatus;
}
extern "C" {
    #[doc = " Stop generating data from the stream."]
    pub fn oniStreamStop(stream: OniStreamHandle);
}
extern "C" {
    #[doc = " Get the next frame from the stream. This function is blocking until there is a new frame from the stream. For timeout, use oniWaitForStreams() first"]
    pub fn oniStreamReadFrame(stream: OniStreamHandle, pFrame: *mut *mut OniFrame) -> OniStatus;
}
extern "C" {
    #[doc = " Register a callback to when the stream has a new frame."]
    pub fn oniStreamRegisterNewFrameCallback(
        stream: OniStreamHandle,
        handler: OniNewFrameCallback,
        pCookie: *mut ::std::os::raw::c_void,
        pHandle: *mut OniCallbackHandle,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Unregister a previously registered callback to when the stream has a new frame."]
    pub fn oniStreamUnregisterNewFrameCallback(stream: OniStreamHandle, handle: OniCallbackHandle);
}
extern "C" {
    #[doc = " Set property in the stream. Use the properties listed in OniTypes.h: ONI_STREAM_PROPERTY_..., or specific ones supplied by the device for its streams."]
    pub fn oniStreamSetProperty(
        stream: OniStreamHandle,
        propertyId: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        dataSize: ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Get property in the stream. Use the properties listed in OniTypes.h: ONI_STREAM_PROPERTY_..., or specific ones supplied by the device for its streams."]
    pub fn oniStreamGetProperty(
        stream: OniStreamHandle,
        propertyId: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        pDataSize: *mut ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Check if the property is supported the stream. Use the properties listed in OniTypes.h: ONI_STREAM_PROPERTY_..., or specific ones supplied by the device for its streams."]
    pub fn oniStreamIsPropertySupported(
        stream: OniStreamHandle,
        propertyId: ::std::os::raw::c_int,
    ) -> OniBool;
}
extern "C" {
    #[doc = " Invoke an internal functionality of the stream."]
    pub fn oniStreamInvoke(
        stream: OniStreamHandle,
        commandId: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        dataSize: ::std::os::raw::c_int,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Check if a command is supported, for invoke"]
    pub fn oniStreamIsCommandSupported(
        stream: OniStreamHandle,
        commandId: ::std::os::raw::c_int,
    ) -> OniBool;
}
extern "C" {
    #[doc = " Sets the stream buffer allocation functions. Note that this function may only be called while stream is not started."]
    pub fn oniStreamSetFrameBuffersAllocator(
        stream: OniStreamHandle,
        alloc: OniFrameAllocBufferCallback,
        free: OniFrameFreeBufferCallback,
        pCookie: *mut ::std::os::raw::c_void,
    ) -> OniStatus;
}
extern "C" {
    #[doc = ""]
    #[doc = "** Mark another user of the frame. */"]
    pub fn oniFrameAddRef(pFrame: *mut OniFrame);
}
extern "C" {
    #[doc = " Mark that the frame is no longer needed."]
    pub fn oniFrameRelease(pFrame: *mut OniFrame);
}
extern "C" {
    #[doc = " Creates a recorder that records to a file."]
    #[doc = " @param\t[in]\tfileName\tThe name of the file that will contain the recording."]
    #[doc = " @param\t[out]\tpRecorder\tPoints to the handle to the newly created recorder."]
    #[doc = " @retval ONI_STATUS_OK Upon successful completion."]
    #[doc = " @retval ONI_STATUS_ERROR Upon any kind of failure."]
    pub fn oniCreateRecorder(
        fileName: *const ::std::os::raw::c_char,
        pRecorder: *mut OniRecorderHandle,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Attaches a stream to a recorder. The amount of attached streams is virtually"]
    #[doc = " infinite. You cannot attach a stream after you have started a recording, if"]
    #[doc = " you do: an error will be returned by oniRecorderAttachStream."]
    #[doc = " @param\t[in]\trecorder\t\t\t\tThe handle to the recorder."]
    #[doc = " @param\t[in]\tstream\t\t\t\t\tThe handle to the stream."]
    #[doc = " @param\t[in]\tallowLossyCompression\tAllows/denies lossy compression"]
    #[doc = " @retval ONI_STATUS_OK Upon successful completion."]
    #[doc = " @retval ONI_STATUS_ERROR Upon any kind of failure."]
    pub fn oniRecorderAttachStream(
        recorder: OniRecorderHandle,
        stream: OniStreamHandle,
        allowLossyCompression: OniBool,
    ) -> OniStatus;
}
extern "C" {
    #[doc = " Starts recording. There must be at least one stream attached to the recorder,"]
    #[doc = " if not: oniRecorderStart will return an error."]
    #[doc = " @param[in] recorder The handle to the recorder."]
    #[doc = " @retval ONI_STATUS_OK Upon successful completion."]
    #[doc = " @retval ONI_STATUS_ERROR Upon any kind of failure."]
    pub fn oniRecorderStart(recorder: OniRecorderHandle) -> OniStatus;
}
extern "C" {
    #[doc = " Stops recording. You can resume recording via oniRecorderStart."]
    #[doc = " @param[in] recorder The handle to the recorder."]
    #[doc = " @retval ONI_STATUS_OK Upon successful completion."]
    #[doc = " @retval ONI_STATUS_ERROR Upon any kind of failure."]
    pub fn oniRecorderStop(recorder: OniRecorderHandle);
}
extern "C" {
    #[doc = " Stops recording if needed, and destroys a recorder."]
    #[doc = " @param\t[in,out]\trecorder\tThe handle to the recorder, the handle will be"]
    #[doc = "\t\t\t\t\t\t\t\t\tinvalidated (nullified) when the function returns."]
    #[doc = " @retval ONI_STATUS_OK Upon successful completion."]
    #[doc = " @retval ONI_STATUS_ERROR Upon any kind of failure."]
    pub fn oniRecorderDestroy(pRecorder: *mut OniRecorderHandle) -> OniStatus;
}
extern "C" {
    pub fn oniCoordinateConverterDepthToWorld(
        depthStream: OniStreamHandle,
        depthX: f32,
        depthY: f32,
        depthZ: f32,
        pWorldX: *mut f32,
        pWorldY: *mut f32,
        pWorldZ: *mut f32,
    ) -> OniStatus;
}
extern "C" {
    pub fn oniCoordinateConverterWorldToDepth(
        depthStream: OniStreamHandle,
        worldX: f32,
        worldY: f32,
        worldZ: f32,
        pDepthX: *mut f32,
        pDepthY: *mut f32,
        pDepthZ: *mut f32,
    ) -> OniStatus;
}
extern "C" {
    pub fn oniCoordinateConverterDepthToColor(
        depthStream: OniStreamHandle,
        colorStream: OniStreamHandle,
        depthX: ::std::os::raw::c_int,
        depthY: ::std::os::raw::c_int,
        depthZ: OniDepthPixel,
        pColorX: *mut ::std::os::raw::c_int,
        pColorY: *mut ::std::os::raw::c_int,
    ) -> OniStatus;
}
pub const NiteJointType_NITE_JOINT_HEAD: NiteJointType = 0;
pub const NiteJointType_NITE_JOINT_NECK: NiteJointType = 1;
pub const NiteJointType_NITE_JOINT_LEFT_SHOULDER: NiteJointType = 2;
pub const NiteJointType_NITE_JOINT_RIGHT_SHOULDER: NiteJointType = 3;
pub const NiteJointType_NITE_JOINT_LEFT_ELBOW: NiteJointType = 4;
pub const NiteJointType_NITE_JOINT_RIGHT_ELBOW: NiteJointType = 5;
pub const NiteJointType_NITE_JOINT_LEFT_HAND: NiteJointType = 6;
pub const NiteJointType_NITE_JOINT_RIGHT_HAND: NiteJointType = 7;
pub const NiteJointType_NITE_JOINT_TORSO: NiteJointType = 8;
pub const NiteJointType_NITE_JOINT_LEFT_HIP: NiteJointType = 9;
pub const NiteJointType_NITE_JOINT_RIGHT_HIP: NiteJointType = 10;
pub const NiteJointType_NITE_JOINT_LEFT_KNEE: NiteJointType = 11;
pub const NiteJointType_NITE_JOINT_RIGHT_KNEE: NiteJointType = 12;
pub const NiteJointType_NITE_JOINT_LEFT_FOOT: NiteJointType = 13;
pub const NiteJointType_NITE_JOINT_RIGHT_FOOT: NiteJointType = 14;
#[doc = " Available joints in skeleton"]
pub type NiteJointType = ::std::os::raw::c_uint;
#[doc = " No skeleton - skeleton was not requested"]
pub const NiteSkeletonState_NITE_SKELETON_NONE: NiteSkeletonState = 0;
#[doc = " Skeleton requested, but still unavailable"]
pub const NiteSkeletonState_NITE_SKELETON_CALIBRATING: NiteSkeletonState = 1;
#[doc = " Skeleton available"]
pub const NiteSkeletonState_NITE_SKELETON_TRACKED: NiteSkeletonState = 2;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const NiteSkeletonState_NITE_SKELETON_CALIBRATION_ERROR_NOT_IN_POSE: NiteSkeletonState = 3;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const NiteSkeletonState_NITE_SKELETON_CALIBRATION_ERROR_HANDS: NiteSkeletonState = 4;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const NiteSkeletonState_NITE_SKELETON_CALIBRATION_ERROR_HEAD: NiteSkeletonState = 5;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const NiteSkeletonState_NITE_SKELETON_CALIBRATION_ERROR_LEGS: NiteSkeletonState = 6;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const NiteSkeletonState_NITE_SKELETON_CALIBRATION_ERROR_TORSO: NiteSkeletonState = 7;
#[doc = " Possible states of the skeleton"]
pub type NiteSkeletonState = ::std::os::raw::c_uint;
#[doc = " User is visible and already known"]
pub const NiteUserState_NITE_USER_STATE_VISIBLE: NiteUserState = 1;
#[doc = " User is new - this is the first time the user is available"]
pub const NiteUserState_NITE_USER_STATE_NEW: NiteUserState = 2;
#[doc = " User is lost. This is the last time this user will be seen"]
pub const NiteUserState_NITE_USER_STATE_LOST: NiteUserState = 4;
#[doc = " Possible states of the user"]
pub type NiteUserState = ::std::os::raw::c_uint;
pub const NiteStatus_NITE_STATUS_OK: NiteStatus = 0;
pub const NiteStatus_NITE_STATUS_ERROR: NiteStatus = 1;
pub const NiteStatus_NITE_STATUS_BAD_USER_ID: NiteStatus = 2;
pub const NiteStatus_NITE_STATUS_OUT_OF_FLOW: NiteStatus = 3;
#[doc = " Possible failure values"]
pub type NiteStatus = ::std::os::raw::c_uint;
pub const NitePoseType_NITE_POSE_PSI: NitePoseType = 0;
pub const NitePoseType_NITE_POSE_CROSSED_HANDS: NitePoseType = 1;
pub type NitePoseType = ::std::os::raw::c_uint;
pub const NitePoseState_NITE_POSE_STATE_DETECTING: NitePoseState = 1;
pub const NitePoseState_NITE_POSE_STATE_IN_POSE: NitePoseState = 2;
pub const NitePoseState_NITE_POSE_STATE_ENTER: NitePoseState = 4;
pub const NitePoseState_NITE_POSE_STATE_EXIT: NitePoseState = 8;
pub type NitePoseState = ::std::os::raw::c_uint;
pub const NiteGestureType_NITE_GESTURE_WAVE: NiteGestureType = 0;
pub const NiteGestureType_NITE_GESTURE_CLICK: NiteGestureType = 1;
pub const NiteGestureType_NITE_GESTURE_HAND_RAISE: NiteGestureType = 2;
#[doc = " Available gestures types"]
pub type NiteGestureType = ::std::os::raw::c_uint;
pub const NiteGestureState_NITE_GESTURE_STATE_NEW: NiteGestureState = 1;
pub const NiteGestureState_NITE_GESTURE_STATE_IN_PROGRESS: NiteGestureState = 2;
pub const NiteGestureState_NITE_GESTURE_STATE_COMPLETED: NiteGestureState = 4;
#[doc = " Possible state of a gesture. Currently only 'Complete' is used."]
pub type NiteGestureState = ::std::os::raw::c_uint;
#[doc = " This hand was lost. It is the last frame in which it will be provided"]
pub const NiteHandState_NITE_HAND_STATE_LOST: NiteHandState = 0;
#[doc = " This is a new hand - it is the first frame in which it is available"]
pub const NiteHandState_NITE_HAND_STATE_NEW: NiteHandState = 1;
#[doc = " This is a known hand"]
pub const NiteHandState_NITE_HAND_STATE_TRACKED: NiteHandState = 2;
#[doc = " This is a known hand, and in this frame it's very near the edge of the field of view"]
pub const NiteHandState_NITE_HAND_STATE_TOUCHING_FOV: NiteHandState = 4;
#[doc = " Possible state of a hand"]
pub type NiteHandState = ::std::os::raw::c_uint;
pub type NiteUserId = ::std::os::raw::c_short;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteUserTracker {
    _unused: [u8; 0],
}
pub type NiteUserTrackerHandle = *mut NiteUserTracker;
#[doc = " 3D Point"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NitePoint3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_NitePoint3f() {
    assert_eq!(
        ::std::mem::size_of::<NitePoint3f>(),
        12usize,
        concat!("Size of: ", stringify!(NitePoint3f))
    );
    assert_eq!(
        ::std::mem::align_of::<NitePoint3f>(),
        4usize,
        concat!("Alignment of ", stringify!(NitePoint3f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NitePoint3f>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NitePoint3f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NitePoint3f>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NitePoint3f),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NitePoint3f>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NitePoint3f),
            "::",
            stringify!(z)
        )
    );
}
#[doc = " Quaternion"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteQuaternion {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_NiteQuaternion() {
    assert_eq!(
        ::std::mem::size_of::<NiteQuaternion>(),
        16usize,
        concat!("Size of: ", stringify!(NiteQuaternion))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteQuaternion>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteQuaternion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteQuaternion>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteQuaternion),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteQuaternion>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteQuaternion),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteQuaternion>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteQuaternion),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteQuaternion>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteQuaternion),
            "::",
            stringify!(w)
        )
    );
}
#[doc = " Single joint of a skeleton"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteSkeletonJoint {
    #[doc = " Type of the joint"]
    pub jointType: NiteJointType,
    #[doc = " Position of the joint - in real world coordinates"]
    pub position: NitePoint3f,
    pub positionConfidence: f32,
    #[doc = " Orientation of the joint"]
    pub orientation: NiteQuaternion,
    pub orientationConfidence: f32,
}
#[test]
fn bindgen_test_layout_NiteSkeletonJoint() {
    assert_eq!(
        ::std::mem::size_of::<NiteSkeletonJoint>(),
        40usize,
        concat!("Size of: ", stringify!(NiteSkeletonJoint))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteSkeletonJoint>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteSkeletonJoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteSkeletonJoint>())).jointType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteSkeletonJoint),
            "::",
            stringify!(jointType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteSkeletonJoint>())).position as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteSkeletonJoint),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteSkeletonJoint>())).positionConfidence as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteSkeletonJoint),
            "::",
            stringify!(positionConfidence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteSkeletonJoint>())).orientation as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteSkeletonJoint),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteSkeletonJoint>())).orientationConfidence as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteSkeletonJoint),
            "::",
            stringify!(orientationConfidence)
        )
    );
}
#[doc = " 3D Box"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteBoundingBox {
    pub min: NitePoint3f,
    pub max: NitePoint3f,
}
#[test]
fn bindgen_test_layout_NiteBoundingBox() {
    assert_eq!(
        ::std::mem::size_of::<NiteBoundingBox>(),
        24usize,
        concat!("Size of: ", stringify!(NiteBoundingBox))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteBoundingBox>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteBoundingBox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteBoundingBox>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteBoundingBox),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteBoundingBox>())).max as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteBoundingBox),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NitePoseData {
    pub type_: NitePoseType,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NitePoseData() {
    assert_eq!(
        ::std::mem::size_of::<NitePoseData>(),
        8usize,
        concat!("Size of: ", stringify!(NitePoseData))
    );
    assert_eq!(
        ::std::mem::align_of::<NitePoseData>(),
        4usize,
        concat!("Alignment of ", stringify!(NitePoseData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NitePoseData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NitePoseData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NitePoseData>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NitePoseData),
            "::",
            stringify!(state)
        )
    );
}
#[doc = " Skeleton - a set of joints"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteSkeleton {
    pub joints: [NiteSkeletonJoint; 15usize],
    pub state: NiteSkeletonState,
}
#[test]
fn bindgen_test_layout_NiteSkeleton() {
    assert_eq!(
        ::std::mem::size_of::<NiteSkeleton>(),
        604usize,
        concat!("Size of: ", stringify!(NiteSkeleton))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteSkeleton>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteSkeleton))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteSkeleton>())).joints as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteSkeleton),
            "::",
            stringify!(joints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteSkeleton>())).state as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteSkeleton),
            "::",
            stringify!(state)
        )
    );
}
#[doc = " Snapshot of a specific user"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteUserData {
    pub id: NiteUserId,
    pub boundingBox: NiteBoundingBox,
    pub centerOfMass: NitePoint3f,
    pub state: ::std::os::raw::c_int,
    pub skeleton: NiteSkeleton,
    pub poses: [NitePoseData; 2usize],
}
#[test]
fn bindgen_test_layout_NiteUserData() {
    assert_eq!(
        ::std::mem::size_of::<NiteUserData>(),
        664usize,
        concat!("Size of: ", stringify!(NiteUserData))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteUserData>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteUserData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserData>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserData),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserData>())).boundingBox as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserData),
            "::",
            stringify!(boundingBox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserData>())).centerOfMass as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserData),
            "::",
            stringify!(centerOfMass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserData>())).state as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserData),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserData>())).skeleton as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserData),
            "::",
            stringify!(skeleton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserData>())).poses as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserData),
            "::",
            stringify!(poses)
        )
    );
}
#[doc = " Snapshot of the scene segmentation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteUserMap {
    pub pixels: *mut NiteUserId,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NiteUserMap() {
    assert_eq!(
        ::std::mem::size_of::<NiteUserMap>(),
        24usize,
        concat!("Size of: ", stringify!(NiteUserMap))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteUserMap>(),
        8usize,
        concat!("Alignment of ", stringify!(NiteUserMap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserMap>())).pixels as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserMap),
            "::",
            stringify!(pixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserMap>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserMap),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserMap>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserMap),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserMap>())).stride as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserMap),
            "::",
            stringify!(stride)
        )
    );
}
#[doc = " 3D Plane"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NitePlane {
    pub point: NitePoint3f,
    pub normal: NitePoint3f,
}
#[test]
fn bindgen_test_layout_NitePlane() {
    assert_eq!(
        ::std::mem::size_of::<NitePlane>(),
        24usize,
        concat!("Size of: ", stringify!(NitePlane))
    );
    assert_eq!(
        ::std::mem::align_of::<NitePlane>(),
        4usize,
        concat!("Alignment of ", stringify!(NitePlane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NitePlane>())).point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NitePlane),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NitePlane>())).normal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NitePlane),
            "::",
            stringify!(normal)
        )
    );
}
#[doc = " Output snapshot of the User Tracker algorithm"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteUserTrackerFrame {
    #[doc = " Number of users"]
    pub userCount: ::std::os::raw::c_int,
    #[doc = " List of users"]
    pub pUser: *mut NiteUserData,
    #[doc = " Scene segmentation map"]
    pub userMap: NiteUserMap,
    #[doc = " The depth frame from which this data was learned"]
    pub pDepthFrame: *mut OniFrame,
    pub timestamp: ::std::os::raw::c_ulonglong,
    pub frameIndex: ::std::os::raw::c_int,
    #[doc = " Confidence of the floor plane"]
    pub floorConfidence: f32,
    #[doc = " Floor plane"]
    pub floor: NitePlane,
}
#[test]
fn bindgen_test_layout_NiteUserTrackerFrame() {
    assert_eq!(
        ::std::mem::size_of::<NiteUserTrackerFrame>(),
        88usize,
        concat!("Size of: ", stringify!(NiteUserTrackerFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteUserTrackerFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(NiteUserTrackerFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserTrackerFrame>())).userCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(userCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserTrackerFrame>())).pUser as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(pUser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserTrackerFrame>())).userMap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(userMap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteUserTrackerFrame>())).pDepthFrame as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(pDepthFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserTrackerFrame>())).timestamp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserTrackerFrame>())).frameIndex as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(frameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteUserTrackerFrame>())).floorConfidence as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(floorConfidence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteUserTrackerFrame>())).floor as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerFrame),
            "::",
            stringify!(floor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteUserTrackerCallbacks {
    pub readyForNextFrame: OniGeneralCallback,
}
#[test]
fn bindgen_test_layout_NiteUserTrackerCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<NiteUserTrackerCallbacks>(),
        8usize,
        concat!("Size of: ", stringify!(NiteUserTrackerCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteUserTrackerCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(NiteUserTrackerCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteUserTrackerCallbacks>())).readyForNextFrame as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteUserTrackerCallbacks),
            "::",
            stringify!(readyForNextFrame)
        )
    );
}
pub type NiteHandId = ::std::os::raw::c_short;
#[doc = " A snapshot of a specific hand"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteHandData {
    pub id: NiteHandId,
    pub position: NitePoint3f,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NiteHandData() {
    assert_eq!(
        ::std::mem::size_of::<NiteHandData>(),
        20usize,
        concat!("Size of: ", stringify!(NiteHandData))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteHandData>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteHandData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandData>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandData),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandData>())).position as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandData),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandData>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandData),
            "::",
            stringify!(state)
        )
    );
}
#[doc = " A snapshot of a specific gesture"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteGestureData {
    pub type_: NiteGestureType,
    pub currentPosition: NitePoint3f,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NiteGestureData() {
    assert_eq!(
        ::std::mem::size_of::<NiteGestureData>(),
        20usize,
        concat!("Size of: ", stringify!(NiteGestureData))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteGestureData>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteGestureData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteGestureData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteGestureData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteGestureData>())).currentPosition as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteGestureData),
            "::",
            stringify!(currentPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteGestureData>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteGestureData),
            "::",
            stringify!(state)
        )
    );
}
#[doc = " Output snapshot of the Hand Tracker algorithm"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteHandTrackerFrame {
    #[doc = " Number of hands"]
    pub handCount: ::std::os::raw::c_int,
    #[doc = " List of hands"]
    pub pHands: *mut NiteHandData,
    #[doc = " Number of gestures"]
    pub gestureCount: ::std::os::raw::c_int,
    #[doc = " List of gestures"]
    pub pGestures: *mut NiteGestureData,
    #[doc = " The depth frame from which this data was learned"]
    pub pDepthFrame: *mut OniFrame,
    pub timestamp: ::std::os::raw::c_ulonglong,
    pub frameIndex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NiteHandTrackerFrame() {
    assert_eq!(
        ::std::mem::size_of::<NiteHandTrackerFrame>(),
        56usize,
        concat!("Size of: ", stringify!(NiteHandTrackerFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteHandTrackerFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(NiteHandTrackerFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandTrackerFrame>())).handCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerFrame),
            "::",
            stringify!(handCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandTrackerFrame>())).pHands as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerFrame),
            "::",
            stringify!(pHands)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteHandTrackerFrame>())).gestureCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerFrame),
            "::",
            stringify!(gestureCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandTrackerFrame>())).pGestures as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerFrame),
            "::",
            stringify!(pGestures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteHandTrackerFrame>())).pDepthFrame as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerFrame),
            "::",
            stringify!(pDepthFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandTrackerFrame>())).timestamp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerFrame),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteHandTrackerFrame>())).frameIndex as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerFrame),
            "::",
            stringify!(frameIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteHandTrackerCallbacks {
    pub readyForNextFrame: OniGeneralCallback,
}
#[test]
fn bindgen_test_layout_NiteHandTrackerCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<NiteHandTrackerCallbacks>(),
        8usize,
        concat!("Size of: ", stringify!(NiteHandTrackerCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteHandTrackerCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(NiteHandTrackerCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NiteHandTrackerCallbacks>())).readyForNextFrame as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteHandTrackerCallbacks),
            "::",
            stringify!(readyForNextFrame)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteVersion {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub maintenance: ::std::os::raw::c_int,
    pub build: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NiteVersion() {
    assert_eq!(
        ::std::mem::size_of::<NiteVersion>(),
        16usize,
        concat!("Size of: ", stringify!(NiteVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<NiteVersion>(),
        4usize,
        concat!("Alignment of ", stringify!(NiteVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteVersion>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteVersion),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteVersion>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteVersion),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteVersion>())).maintenance as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteVersion),
            "::",
            stringify!(maintenance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NiteVersion>())).build as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NiteVersion),
            "::",
            stringify!(build)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NiteHandTracker {
    _unused: [u8; 0],
}
pub type NiteHandTrackerHandle = *mut NiteHandTracker;
extern "C" {
    pub fn niteInitialize() -> NiteStatus;
}
extern "C" {
    pub fn niteShutdown();
}
extern "C" {
    pub fn niteGetVersion() -> NiteVersion;
}
extern "C" {
    pub fn niteInitializeUserTracker(arg1: *mut NiteUserTrackerHandle) -> NiteStatus;
}
extern "C" {
    pub fn niteInitializeUserTrackerByDevice(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut NiteUserTrackerHandle,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteShutdownUserTracker(arg1: NiteUserTrackerHandle) -> NiteStatus;
}
extern "C" {
    pub fn niteStartSkeletonTracking(arg1: NiteUserTrackerHandle, arg2: NiteUserId) -> NiteStatus;
}
extern "C" {
    pub fn niteStopSkeletonTracking(arg1: NiteUserTrackerHandle, arg2: NiteUserId);
}
extern "C" {
    pub fn niteIsSkeletonTracking(arg1: NiteUserTrackerHandle, arg2: NiteUserId) -> bool;
}
extern "C" {
    pub fn niteSetSkeletonSmoothing(arg1: NiteUserTrackerHandle, arg2: f32) -> NiteStatus;
}
extern "C" {
    pub fn niteGetSkeletonSmoothing(arg1: NiteUserTrackerHandle, arg2: *mut f32) -> NiteStatus;
}
extern "C" {
    pub fn niteStartPoseDetection(
        arg1: NiteUserTrackerHandle,
        arg2: NiteUserId,
        arg3: NitePoseType,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteStopPoseDetection(arg1: NiteUserTrackerHandle, arg2: NiteUserId, arg3: NitePoseType);
}
extern "C" {
    pub fn niteStopAllPoseDetection(arg1: NiteUserTrackerHandle, arg2: NiteUserId);
}
extern "C" {
    pub fn niteRegisterUserTrackerCallbacks(
        arg1: NiteUserTrackerHandle,
        arg2: *mut NiteUserTrackerCallbacks,
        arg3: *mut ::std::os::raw::c_void,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteUnregisterUserTrackerCallbacks(
        arg1: NiteUserTrackerHandle,
        arg2: *mut NiteUserTrackerCallbacks,
    );
}
extern "C" {
    pub fn niteReadUserTrackerFrame(
        arg1: NiteUserTrackerHandle,
        arg2: *mut *mut NiteUserTrackerFrame,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteUserTrackerFrameAddRef(
        arg1: NiteUserTrackerHandle,
        arg2: *mut NiteUserTrackerFrame,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteUserTrackerFrameRelease(
        arg1: NiteUserTrackerHandle,
        arg2: *mut NiteUserTrackerFrame,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteInitializeHandTracker(arg1: *mut NiteHandTrackerHandle) -> NiteStatus;
}
extern "C" {
    pub fn niteInitializeHandTrackerByDevice(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut NiteHandTrackerHandle,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteShutdownHandTracker(arg1: NiteHandTrackerHandle) -> NiteStatus;
}
extern "C" {
    pub fn niteStartHandTracking(
        arg1: NiteHandTrackerHandle,
        arg2: *const NitePoint3f,
        pNewHandId: *mut NiteHandId,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteStopHandTracking(arg1: NiteHandTrackerHandle, arg2: NiteHandId);
}
extern "C" {
    pub fn niteStopAllHandTracking(arg1: NiteHandTrackerHandle);
}
extern "C" {
    pub fn niteSetHandSmoothingFactor(arg1: NiteHandTrackerHandle, arg2: f32) -> NiteStatus;
}
extern "C" {
    pub fn niteGetHandSmoothingFactor(arg1: NiteHandTrackerHandle, arg2: *mut f32) -> NiteStatus;
}
extern "C" {
    pub fn niteRegisterHandTrackerCallbacks(
        arg1: NiteHandTrackerHandle,
        arg2: *mut NiteHandTrackerCallbacks,
        arg3: *mut ::std::os::raw::c_void,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteUnregisterHandTrackerCallbacks(
        arg1: NiteHandTrackerHandle,
        arg2: *mut NiteHandTrackerCallbacks,
    );
}
extern "C" {
    pub fn niteReadHandTrackerFrame(
        arg1: NiteHandTrackerHandle,
        arg2: *mut *mut NiteHandTrackerFrame,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteHandTrackerFrameAddRef(
        arg1: NiteHandTrackerHandle,
        arg2: *mut NiteHandTrackerFrame,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteHandTrackerFrameRelease(
        arg1: NiteHandTrackerHandle,
        arg2: *mut NiteHandTrackerFrame,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteStartGestureDetection(
        arg1: NiteHandTrackerHandle,
        arg2: NiteGestureType,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteStopGestureDetection(arg1: NiteHandTrackerHandle, arg2: NiteGestureType);
}
extern "C" {
    pub fn niteStopAllGestureDetection(arg1: NiteHandTrackerHandle);
}
extern "C" {
    pub fn niteConvertJointCoordinatesToDepth(
        userTracker: NiteUserTrackerHandle,
        x: f32,
        y: f32,
        z: f32,
        pX: *mut f32,
        pY: *mut f32,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteConvertDepthCoordinatesToJoint(
        userTracker: NiteUserTrackerHandle,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        pX: *mut f32,
        pY: *mut f32,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteConvertHandCoordinatesToDepth(
        handTracker: NiteHandTrackerHandle,
        x: f32,
        y: f32,
        z: f32,
        pX: *mut f32,
        pY: *mut f32,
    ) -> NiteStatus;
}
extern "C" {
    pub fn niteConvertDepthCoordinatesToHand(
        handTracker: NiteHandTrackerHandle,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        pX: *mut f32,
        pY: *mut f32,
    ) -> NiteStatus;
}
pub const DEVICE_PROPERTY_FIRMWARE_VERSION: ::std::os::raw::c_uint = 0;
pub const DEVICE_PROPERTY_DRIVER_VERSION: ::std::os::raw::c_uint = 1;
pub const DEVICE_PROPERTY_HARDWARE_VERSION: ::std::os::raw::c_uint = 2;
pub const DEVICE_PROPERTY_SERIAL_NUMBER: ::std::os::raw::c_uint = 3;
pub const DEVICE_PROPERTY_ERROR_STATE: ::std::os::raw::c_uint = 4;
pub const DEVICE_PROPERTY_IMAGE_REGISTRATION: ::std::os::raw::c_uint = 5;
pub const DEVICE_PROPERTY_PLAYBACK_SPEED: ::std::os::raw::c_uint = 100;
pub const DEVICE_PROPERTY_PLAYBACK_REPEAT_ENABLED: ::std::os::raw::c_uint = 101;
pub type openni__bindgen_ty_1 = ::std::os::raw::c_uint;
pub const STREAM_PROPERTY_CROPPING: ::std::os::raw::c_uint = 0;
pub const STREAM_PROPERTY_HORIZONTAL_FOV: ::std::os::raw::c_uint = 1;
pub const STREAM_PROPERTY_VERTICAL_FOV: ::std::os::raw::c_uint = 2;
pub const STREAM_PROPERTY_VIDEO_MODE: ::std::os::raw::c_uint = 3;
pub const STREAM_PROPERTY_MAX_VALUE: ::std::os::raw::c_uint = 4;
pub const STREAM_PROPERTY_MIN_VALUE: ::std::os::raw::c_uint = 5;
pub const STREAM_PROPERTY_STRIDE: ::std::os::raw::c_uint = 6;
pub const STREAM_PROPERTY_MIRRORING: ::std::os::raw::c_uint = 7;
pub const STREAM_PROPERTY_NUMBER_OF_FRAMES: ::std::os::raw::c_uint = 8;
pub const STREAM_PROPERTY_AUTO_WHITE_BALANCE: ::std::os::raw::c_uint = 100;
pub const STREAM_PROPERTY_AUTO_EXPOSURE: ::std::os::raw::c_uint = 101;
pub const STREAM_PROPERTY_EXPOSURE: ::std::os::raw::c_uint = 102;
pub const STREAM_PROPERTY_GAIN: ::std::os::raw::c_uint = 103;
pub type openni__bindgen_ty_2 = ::std::os::raw::c_uint;
pub const DEVICE_COMMAND_SEEK: ::std::os::raw::c_uint = 1;
pub type openni__bindgen_ty_3 = ::std::os::raw::c_uint;
pub const openni_Status_STATUS_OK: openni_Status = 0;
pub const openni_Status_STATUS_ERROR: openni_Status = 1;
pub const openni_Status_STATUS_NOT_IMPLEMENTED: openni_Status = 2;
pub const openni_Status_STATUS_NOT_SUPPORTED: openni_Status = 3;
pub const openni_Status_STATUS_BAD_PARAMETER: openni_Status = 4;
pub const openni_Status_STATUS_OUT_OF_FLOW: openni_Status = 5;
pub const openni_Status_STATUS_NO_DEVICE: openni_Status = 6;
pub const openni_Status_STATUS_TIME_OUT: openni_Status = 102;
#[doc = " Possible failure values"]
pub type openni_Status = ::std::os::raw::c_uint;
pub const openni_SensorType_SENSOR_IR: openni_SensorType = 1;
pub const openni_SensorType_SENSOR_COLOR: openni_SensorType = 2;
pub const openni_SensorType_SENSOR_DEPTH: openni_SensorType = 3;
#[doc = " The source of the stream"]
pub type openni_SensorType = ::std::os::raw::c_uint;
pub const openni_PixelFormat_PIXEL_FORMAT_DEPTH_1_MM: openni_PixelFormat = 100;
pub const openni_PixelFormat_PIXEL_FORMAT_DEPTH_100_UM: openni_PixelFormat = 101;
pub const openni_PixelFormat_PIXEL_FORMAT_SHIFT_9_2: openni_PixelFormat = 102;
pub const openni_PixelFormat_PIXEL_FORMAT_SHIFT_9_3: openni_PixelFormat = 103;
pub const openni_PixelFormat_PIXEL_FORMAT_RGB888: openni_PixelFormat = 200;
pub const openni_PixelFormat_PIXEL_FORMAT_YUV422: openni_PixelFormat = 201;
pub const openni_PixelFormat_PIXEL_FORMAT_GRAY8: openni_PixelFormat = 202;
pub const openni_PixelFormat_PIXEL_FORMAT_GRAY16: openni_PixelFormat = 203;
pub const openni_PixelFormat_PIXEL_FORMAT_JPEG: openni_PixelFormat = 204;
pub const openni_PixelFormat_PIXEL_FORMAT_YUYV: openni_PixelFormat = 205;
#[doc = " All available formats of the output of a stream"]
pub type openni_PixelFormat = ::std::os::raw::c_uint;
pub const openni_DeviceState_DEVICE_STATE_OK: openni_DeviceState = 0;
pub const openni_DeviceState_DEVICE_STATE_ERROR: openni_DeviceState = 1;
pub const openni_DeviceState_DEVICE_STATE_NOT_READY: openni_DeviceState = 2;
pub const openni_DeviceState_DEVICE_STATE_EOF: openni_DeviceState = 3;
pub type openni_DeviceState = ::std::os::raw::c_uint;
pub const openni_ImageRegistrationMode_IMAGE_REGISTRATION_OFF: openni_ImageRegistrationMode = 0;
pub const openni_ImageRegistrationMode_IMAGE_REGISTRATION_DEPTH_TO_COLOR:
    openni_ImageRegistrationMode = 1;
pub type openni_ImageRegistrationMode = ::std::os::raw::c_uint;
pub const openni_TIMEOUT_NONE: ::std::os::raw::c_int = 0;
pub const openni_TIMEOUT_FOREVER: ::std::os::raw::c_int = -1;
#[doc = " Pixel type used to store depth images."]
pub type openni_DepthPixel = u16;
#[doc = " Pixel type used to store IR images."]
pub type openni_Grayscale16Pixel = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openni_Version {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub maintenance: ::std::os::raw::c_int,
    pub build: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_openni_Version() {
    assert_eq!(
        ::std::mem::size_of::<openni_Version>(),
        16usize,
        concat!("Size of: ", stringify!(openni_Version))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_Version>(),
        4usize,
        concat!("Alignment of ", stringify!(openni_Version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Version>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Version>())).maintenance as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Version),
            "::",
            stringify!(maintenance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Version>())).build as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Version),
            "::",
            stringify!(build)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openni_RGB888Pixel {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}
#[test]
fn bindgen_test_layout_openni_RGB888Pixel() {
    assert_eq!(
        ::std::mem::size_of::<openni_RGB888Pixel>(),
        3usize,
        concat!("Size of: ", stringify!(openni_RGB888Pixel))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_RGB888Pixel>(),
        1usize,
        concat!("Alignment of ", stringify!(openni_RGB888Pixel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_RGB888Pixel>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_RGB888Pixel),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_RGB888Pixel>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_RGB888Pixel),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_RGB888Pixel>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_RGB888Pixel),
            "::",
            stringify!(b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openni_YUV422DoublePixel {
    pub u: u8,
    pub y1: u8,
    pub v: u8,
    pub y2: u8,
}
#[test]
fn bindgen_test_layout_openni_YUV422DoublePixel() {
    assert_eq!(
        ::std::mem::size_of::<openni_YUV422DoublePixel>(),
        4usize,
        concat!("Size of: ", stringify!(openni_YUV422DoublePixel))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_YUV422DoublePixel>(),
        1usize,
        concat!("Alignment of ", stringify!(openni_YUV422DoublePixel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_YUV422DoublePixel>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_YUV422DoublePixel),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_YUV422DoublePixel>())).y1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_YUV422DoublePixel),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_YUV422DoublePixel>())).v as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_YUV422DoublePixel),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_YUV422DoublePixel>())).y2 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_YUV422DoublePixel),
            "::",
            stringify!(y2)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6openniL10ANY_DEVICEE"]
    pub static mut openni_ANY_DEVICE: *const ::std::os::raw::c_char;
}
#[doc = "Provides a simple array class used throughout the API. Wraps a primitive array"]
#[doc = "of objects, holding the elements and their count."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_Array<T> {
    pub m_data: *const T,
    pub m_count: ::std::os::raw::c_int,
    pub m_owner: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[doc = "Encapsulates a group of settings for a @ref VideoStream.  Settings stored include"]
#[doc = "frame rate, resolution, and pixel format."]
#[doc = ""]
#[doc = "This class is used as an input for changing the settings of a @ref VideoStream,"]
#[doc = "as well as an output for reporting the current settings of that class.  It is also used"]
#[doc = "by @ref SensorInfo to report available video modes of a stream."]
#[doc = ""]
#[doc = "Recommended practice is to use @ref SensorInfo::getSupportedVideoModes()"]
#[doc = "to obtain a list of valid video modes, and then to use items from that list to pass"]
#[doc = "new settings to @ref VideoStream.  This is much less likely to produce an"]
#[doc = "invalid video mode than instantiating and manually changing objects of this"]
#[doc = "class."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openni_VideoMode {
    pub _base: OniVideoMode,
}
#[test]
fn bindgen_test_layout_openni_VideoMode() {
    assert_eq!(
        ::std::mem::size_of::<openni_VideoMode>(),
        16usize,
        concat!("Size of: ", stringify!(openni_VideoMode))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_VideoMode>(),
        4usize,
        concat!("Alignment of ", stringify!(openni_VideoMode))
    );
}
#[doc = "The SensorInfo class encapsulates all info related to a specific sensor in a specific"]
#[doc = "device."]
#[doc = "A @ref Device object holds a SensorInfo object for each sensor it contains."]
#[doc = "A @ref VideoStream object holds one SensorInfo object, describing the sensor used to produce that stream."]
#[doc = ""]
#[doc = "A given SensorInfo object will contain the type of the sensor (Depth, IR or Color), and"]
#[doc = "a list of all video modes that the sensor can support.  Each available video mode will have a single"]
#[doc = "VideoMode object that can be queried to get the details of that mode."]
#[doc = ""]
#[doc = "SensorInfo objects should be the only source of VideoMode objects for the vast majority of"]
#[doc = "application programs."]
#[doc = ""]
#[doc = "Application programs will never directly instantiate objects of type SensorInfo.  In fact, no"]
#[doc = "public constructors are provided.  SensorInfo objects should be obtained either from a Device or @ref VideoStream,"]
#[doc = "and in turn be used to provide available video modes for that sensor."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_SensorInfo {
    pub m_pInfo: *const OniSensorInfo,
    pub m_videoModes: openni_Array<openni_VideoMode>,
}
#[test]
fn bindgen_test_layout_openni_SensorInfo() {
    assert_eq!(
        ::std::mem::size_of::<openni_SensorInfo>(),
        24usize,
        concat!("Size of: ", stringify!(openni_SensorInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_SensorInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(openni_SensorInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_SensorInfo>())).m_pInfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_SensorInfo),
            "::",
            stringify!(m_pInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_SensorInfo>())).m_videoModes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_SensorInfo),
            "::",
            stringify!(m_videoModes)
        )
    );
}
#[doc = "The DeviceInfo class encapsulates info related to a specific device."]
#[doc = ""]
#[doc = "Applications will generally obtain objects of this type via calls to @ref OpenNI::enumerateDevices() or"]
#[doc = "@ref openni::Device::getDeviceInfo(), and then use the various accessor functions to obtain specific"]
#[doc = "information on that device."]
#[doc = ""]
#[doc = "There should be no reason for application code to instantiate this object directly."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct openni_DeviceInfo {
    pub _base: OniDeviceInfo,
}
#[test]
fn bindgen_test_layout_openni_DeviceInfo() {
    assert_eq!(
        ::std::mem::size_of::<openni_DeviceInfo>(),
        772usize,
        concat!("Size of: ", stringify!(openni_DeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_DeviceInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(openni_DeviceInfo))
    );
}
#[doc = "The @ref VideoFrameRef class encapsulates a single video frame - the output of a @ref VideoStream at a specific time."]
#[doc = "The data contained will be a single frame of color, IR, or depth video, along with associated meta data."]
#[doc = ""]
#[doc = "An object of type @ref VideoFrameRef does not actually hold the data of the frame, but only a reference to it. The"]
#[doc = "reference can be released by destroying the @ref VideoFrameRef object, or by calling the @ref release() method. The"]
#[doc = "actual data of the frame is freed when the last reference to it is released."]
#[doc = ""]
#[doc = "The usual way to obtain @ref VideoFrameRef objects is by a call to @ref VideoStream.:readFrame()."]
#[doc = ""]
#[doc = "All data references by a @ref VideoFrameRef is stored as a primitive array of pixels.  Each pixel will be"]
#[doc = "of a type according to the configured pixel format (see @ref VideoMode)."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_VideoFrameRef {
    pub m_pFrame: *mut OniFrame,
}
#[test]
fn bindgen_test_layout_openni_VideoFrameRef() {
    assert_eq!(
        ::std::mem::size_of::<openni_VideoFrameRef>(),
        8usize,
        concat!("Size of: ", stringify!(openni_VideoFrameRef))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_VideoFrameRef>(),
        8usize,
        concat!("Alignment of ", stringify!(openni_VideoFrameRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_VideoFrameRef>())).m_pFrame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_VideoFrameRef),
            "::",
            stringify!(m_pFrame)
        )
    );
}
#[doc = "The @ref VideoStream object encapsulates a single video stream from a device.  Once created, it is used to start data flow"]
#[doc = "from the device, and to read individual frames of data.  This is the central class used to obtain data in OpenNI.  It"]
#[doc = "provides the ability to manually read data in a polling loop, as well as providing events and a Listener class that can be"]
#[doc = "used to implement event-driven data acquisition."]
#[doc = ""]
#[doc = "Aside from the video data frames themselves, the class offers a number of functions used for obtaining information about a"]
#[doc = "@ref VideoStream.  Field of view, available video modes, and minimum and maximum valid pixel values can all be obtained."]
#[doc = ""]
#[doc = "In addition to obtaining data, the @ref VideoStream object is used to set all configuration properties that apply to a specific"]
#[doc = "stream (rather than to an entire device).  In particular, it is used to control cropping, mirroring, and video modes."]
#[doc = ""]
#[doc = "A pointer to a valid, initialized device that provides the desired stream type is required to create a stream."]
#[doc = ""]
#[doc = "Several video streams can be created to stream data from the same sensor. This is useful if several components of an application"]
#[doc = "need to read frames separately."]
#[doc = ""]
#[doc = "While some device might allow different streams"]
#[doc = "from the same sensor to have different configurations, most devices will have a single configuration for the sensor,"]
#[doc = "shared by all streams."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_VideoStream {
    pub m_stream: OniStreamHandle,
    pub m_sensorInfo: openni_SensorInfo,
    pub m_pCameraSettings: *mut openni_CameraSettings,
    pub m_isOwner: bool,
}
#[repr(C)]
pub struct openni_VideoStream_NewFrameListener__bindgen_vtable(::std::os::raw::c_void);
#[doc = "The @ref VideoStream::NewFrameListener class is provided to allow the implementation of event driven frame reading.  To use"]
#[doc = "it, create a class that inherits from it and implement override the onNewFrame() method.  Then, register"]
#[doc = "your created class with an active @ref VideoStream using the @ref VideoStream::addNewFrameListener() function.  Once this is done, the"]
#[doc = "event handler function you implemented will be called whenever a new frame becomes available. You may call"]
#[doc = "@ref VideoStream::readFrame() from within the event handler."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_VideoStream_NewFrameListener {
    pub vtable_: *const openni_VideoStream_NewFrameListener__bindgen_vtable,
    pub m_callbackHandle: OniCallbackHandle,
}
#[test]
fn bindgen_test_layout_openni_VideoStream_NewFrameListener() {
    assert_eq!(
        ::std::mem::size_of::<openni_VideoStream_NewFrameListener>(),
        16usize,
        concat!("Size of: ", stringify!(openni_VideoStream_NewFrameListener))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_VideoStream_NewFrameListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(openni_VideoStream_NewFrameListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_VideoStream_NewFrameListener>())).m_callbackHandle
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_VideoStream_NewFrameListener),
            "::",
            stringify!(m_callbackHandle)
        )
    );
}
#[repr(C)]
pub struct openni_VideoStream_FrameAllocator__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct openni_VideoStream_FrameAllocator {
    pub vtable_: *const openni_VideoStream_FrameAllocator__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_openni_VideoStream_FrameAllocator() {
    assert_eq!(
        ::std::mem::size_of::<openni_VideoStream_FrameAllocator>(),
        8usize,
        concat!("Size of: ", stringify!(openni_VideoStream_FrameAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_VideoStream_FrameAllocator>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(openni_VideoStream_FrameAllocator)
        )
    );
}
#[test]
fn bindgen_test_layout_openni_VideoStream() {
    assert_eq!(
        ::std::mem::size_of::<openni_VideoStream>(),
        48usize,
        concat!("Size of: ", stringify!(openni_VideoStream))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_VideoStream>(),
        8usize,
        concat!("Alignment of ", stringify!(openni_VideoStream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_VideoStream>())).m_stream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_VideoStream),
            "::",
            stringify!(m_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_VideoStream>())).m_sensorInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_VideoStream),
            "::",
            stringify!(m_sensorInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_VideoStream>())).m_pCameraSettings as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_VideoStream),
            "::",
            stringify!(m_pCameraSettings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_VideoStream>())).m_isOwner as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_VideoStream),
            "::",
            stringify!(m_isOwner)
        )
    );
}
#[doc = "The Device object abstracts a specific device; either a single hardware device, or a file"]
#[doc = "device holding a recording from a hardware device.  It offers the ability to connect to"]
#[doc = "the device, and obtain information about its configuration and the data streams it can offer."]
#[doc = ""]
#[doc = "It provides the means to query and change all configuration parameters that apply to the"]
#[doc = "device as a whole.  This includes enabling depth/color image registration and frame"]
#[doc = "synchronization."]
#[doc = ""]
#[doc = "Devices are used when creating and initializing @ref VideoStream \"VideoStreams\" -- you will need a valid pointer to"]
#[doc = "a Device in order to use the VideoStream.create() function.  This, along with configuration, is"]
#[doc = "the primary use of this class for application developers."]
#[doc = ""]
#[doc = "Before devices can be created, @ref OpenNI::initialize() must have been run to make the device drivers"]
#[doc = "on the system available to the API."]
#[repr(C)]
pub struct openni_Device {
    pub m_pPlaybackControl: *mut openni_PlaybackControl,
    pub m_device: OniDeviceHandle,
    pub m_deviceInfo: openni_DeviceInfo,
    pub m_aSensorInfo: [openni_SensorInfo; 10usize],
    pub m_isOwner: bool,
}
#[test]
fn bindgen_test_layout_openni_Device() {
    assert_eq!(
        ::std::mem::size_of::<openni_Device>(),
        1040usize,
        concat!("Size of: ", stringify!(openni_Device))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_Device>(),
        8usize,
        concat!("Alignment of ", stringify!(openni_Device))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_Device>())).m_pPlaybackControl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Device),
            "::",
            stringify!(m_pPlaybackControl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Device>())).m_device as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Device),
            "::",
            stringify!(m_device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Device>())).m_deviceInfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Device),
            "::",
            stringify!(m_deviceInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Device>())).m_aSensorInfo as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Device),
            "::",
            stringify!(m_aSensorInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Device>())).m_isOwner as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Device),
            "::",
            stringify!(m_isOwner)
        )
    );
}
#[doc = " The PlaybackControl class provides access to a series of specific to playing back"]
#[doc = " a recording from a file device."]
#[doc = ""]
#[doc = " When playing a stream back from a recording instead of playing from a live device,"]
#[doc = " it is possible to vary playback speed, change the current time location (ie"]
#[doc = " fast forward / rewind / seek), specify whether the playback should be repeated at the end"]
#[doc = " of the recording, and query the total size of the recording."]
#[doc = ""]
#[doc = " Since none of these functions make sense in the context of a physical device, they are"]
#[doc = " split out into a seperate playback control class.  To use, simply create your file device,"]
#[doc = " create a PlaybackControl, and then attach the PlaybackControl to the file device."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_PlaybackControl {
    pub m_pDevice: *mut openni_Device,
}
#[test]
fn bindgen_test_layout_openni_PlaybackControl() {
    assert_eq!(
        ::std::mem::size_of::<openni_PlaybackControl>(),
        8usize,
        concat!("Size of: ", stringify!(openni_PlaybackControl))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_PlaybackControl>(),
        8usize,
        concat!("Alignment of ", stringify!(openni_PlaybackControl))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_PlaybackControl>())).m_pDevice as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_PlaybackControl),
            "::",
            stringify!(m_pDevice)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openni_CameraSettings {
    pub m_pStream: *mut openni_VideoStream,
}
#[test]
fn bindgen_test_layout_openni_CameraSettings() {
    assert_eq!(
        ::std::mem::size_of::<openni_CameraSettings>(),
        8usize,
        concat!("Size of: ", stringify!(openni_CameraSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_CameraSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(openni_CameraSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_CameraSettings>())).m_pStream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_CameraSettings),
            "::",
            stringify!(m_pStream)
        )
    );
}
#[doc = " The OpenNI class is a static entry point to the library.  It is used by every OpenNI 2.0"]
#[doc = " application to initialize the SDK and drivers to enable creation of valid device objects."]
#[doc = ""]
#[doc = " It also defines a listener class and events that enable for event driven notification of"]
#[doc = " device connection, device disconnection, and device configuration changes."]
#[doc = ""]
#[doc = " In addition, it gives access to SDK version information and provides a function that allows"]
#[doc = " you to wait for data to become available on any one of a list of streams (as opposed to"]
#[doc = " waiting for data on one specific stream with functions provided by the VideoStream class)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openni_OpenNI {
    pub _address: u8,
}
#[repr(C)]
pub struct openni_OpenNI_DeviceConnectedListener__bindgen_vtable(::std::os::raw::c_void);
#[doc = " The OpenNI::DeviceConnectedListener class provides a means of registering for, and responding to"]
#[doc = " when a device is connected."]
#[doc = ""]
#[doc = " onDeviceConnected is called whenever a new device is connected to the system (ie this event"]
#[doc = " would be triggered when a new sensor is manually plugged into the host system running the"]
#[doc = " application)"]
#[doc = ""]
#[doc = " To use this class, you should write a new class that inherits from it, and override the"]
#[doc = " onDeviceConnected method.  Once you instantiate your class, use the"]
#[doc = " OpenNI::addDeviceConnectedListener() function to add your listener object to OpenNI's list of listeners.  Your"]
#[doc = " handler function will then be called whenever the event occurs.  A OpenNI::removeDeviceConnectedListener()"]
#[doc = " function is also provided, if you want to have your class stop listening to these events for any"]
#[doc = " reason."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_OpenNI_DeviceConnectedListener {
    pub vtable_: *const openni_OpenNI_DeviceConnectedListener__bindgen_vtable,
    pub m_deviceConnectedCallbacks: OniDeviceCallbacks,
    pub m_deviceConnectedCallbacksHandle: OniCallbackHandle,
}
#[test]
fn bindgen_test_layout_openni_OpenNI_DeviceConnectedListener() {
    assert_eq!(
        ::std::mem::size_of::<openni_OpenNI_DeviceConnectedListener>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(openni_OpenNI_DeviceConnectedListener)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<openni_OpenNI_DeviceConnectedListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(openni_OpenNI_DeviceConnectedListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_OpenNI_DeviceConnectedListener>()))
                .m_deviceConnectedCallbacks as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_OpenNI_DeviceConnectedListener),
            "::",
            stringify!(m_deviceConnectedCallbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_OpenNI_DeviceConnectedListener>()))
                .m_deviceConnectedCallbacksHandle as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_OpenNI_DeviceConnectedListener),
            "::",
            stringify!(m_deviceConnectedCallbacksHandle)
        )
    );
}
#[repr(C)]
pub struct openni_OpenNI_DeviceDisconnectedListener__bindgen_vtable(::std::os::raw::c_void);
#[doc = " The OpenNI::DeviceDisconnectedListener class provides a means of registering for, and responding to"]
#[doc = " when a device is disconnected."]
#[doc = ""]
#[doc = " onDeviceDisconnected is called when a device is removed from the system.  Note that once a"]
#[doc = " device is removed, if it was opened by a @ref Device object, that object can no longer be"]
#[doc = " used to access the device, even if it was reconnected. Once a device was reconnected,"]
#[doc = " @ref Device::open() should be called again in order to use this device."]
#[doc = ""]
#[doc = " To use this class, you should write a new class that inherits from it, and override the"]
#[doc = " onDeviceDisconnected method.  Once you instantiate your class, use the"]
#[doc = " OpenNI::addDeviceDisconnectedListener() function to add your listener object to OpenNI's list of listeners.  Your"]
#[doc = " handler function will then be called whenever the event occurs.  A OpenNI::removeDeviceDisconnectedListener()"]
#[doc = " function is also provided, if you want to have your class stop listening to these events for any"]
#[doc = " reason."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_OpenNI_DeviceDisconnectedListener {
    pub vtable_: *const openni_OpenNI_DeviceDisconnectedListener__bindgen_vtable,
    pub m_deviceDisconnectedCallbacks: OniDeviceCallbacks,
    pub m_deviceDisconnectedCallbacksHandle: OniCallbackHandle,
}
#[test]
fn bindgen_test_layout_openni_OpenNI_DeviceDisconnectedListener() {
    assert_eq!(
        ::std::mem::size_of::<openni_OpenNI_DeviceDisconnectedListener>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(openni_OpenNI_DeviceDisconnectedListener)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<openni_OpenNI_DeviceDisconnectedListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(openni_OpenNI_DeviceDisconnectedListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_OpenNI_DeviceDisconnectedListener>()))
                .m_deviceDisconnectedCallbacks as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_OpenNI_DeviceDisconnectedListener),
            "::",
            stringify!(m_deviceDisconnectedCallbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_OpenNI_DeviceDisconnectedListener>()))
                .m_deviceDisconnectedCallbacksHandle as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_OpenNI_DeviceDisconnectedListener),
            "::",
            stringify!(m_deviceDisconnectedCallbacksHandle)
        )
    );
}
#[repr(C)]
pub struct openni_OpenNI_DeviceStateChangedListener__bindgen_vtable(::std::os::raw::c_void);
#[doc = " The OpenNI::DeviceStateChangedListener class provides a means of registering for, and responding to"]
#[doc = " when a device's state is changed."]
#[doc = ""]
#[doc = " onDeviceStateChanged is triggered whenever the state of a connected device is changed."]
#[doc = ""]
#[doc = " To use this class, you should write a new class that inherits from it, and override the"]
#[doc = " onDeviceStateChanged method.  Once you instantiate your class, use the"]
#[doc = " OpenNI::addDeviceStateChangedListener() function to add your listener object to OpenNI's list of listeners.  Your"]
#[doc = " handler function will then be called whenever the event occurs.  A OpenNI::removeDeviceStateChangedListener()"]
#[doc = " function is also provided, if you want to have your class stop listening to these events for any"]
#[doc = " reason."]
#[repr(C)]
#[derive(Debug)]
pub struct openni_OpenNI_DeviceStateChangedListener {
    pub vtable_: *const openni_OpenNI_DeviceStateChangedListener__bindgen_vtable,
    pub m_deviceStateChangedCallbacks: OniDeviceCallbacks,
    pub m_deviceStateChangedCallbacksHandle: OniCallbackHandle,
}
#[test]
fn bindgen_test_layout_openni_OpenNI_DeviceStateChangedListener() {
    assert_eq!(
        ::std::mem::size_of::<openni_OpenNI_DeviceStateChangedListener>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(openni_OpenNI_DeviceStateChangedListener)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<openni_OpenNI_DeviceStateChangedListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(openni_OpenNI_DeviceStateChangedListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_OpenNI_DeviceStateChangedListener>()))
                .m_deviceStateChangedCallbacks as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_OpenNI_DeviceStateChangedListener),
            "::",
            stringify!(m_deviceStateChangedCallbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openni_OpenNI_DeviceStateChangedListener>()))
                .m_deviceStateChangedCallbacksHandle as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_OpenNI_DeviceStateChangedListener),
            "::",
            stringify!(m_deviceStateChangedCallbacksHandle)
        )
    );
}
#[test]
fn bindgen_test_layout_openni_OpenNI() {
    assert_eq!(
        ::std::mem::size_of::<openni_OpenNI>(),
        1usize,
        concat!("Size of: ", stringify!(openni_OpenNI))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_OpenNI>(),
        1usize,
        concat!("Alignment of ", stringify!(openni_OpenNI))
    );
}
#[doc = "The CoordinateConverter class converts points between the different coordinate systems."]
#[doc = ""]
#[doc = "<b>Depth and World coordinate systems</b>"]
#[doc = ""]
#[doc = "OpenNI applications commonly use two different coordinate systems to represent depth.  These two systems are referred to as Depth"]
#[doc = "and World representation."]
#[doc = ""]
#[doc = "Depth coordinates are the native data representation.  In this system, the frame is a map (two dimensional array), and each pixel is"]
#[doc = "assigned a depth value.  This depth value represents the distance between the camera plane and whatever object is in the given"]
#[doc = "pixel. The X and Y coordinates are simply the location in the map, where the origin is the top-left corner of the field of view."]
#[doc = ""]
#[doc = "World coordinates superimpose a more familiar 3D Cartesian coordinate system on the world, with the camera lens at the origin."]
#[doc = "In this system, every point is specified by 3 points -- x, y and z.  The x axis of this system is along a line that passes"]
#[doc = "through the infrared projector and CMOS imager of the camera.  The y axis is parallel to the front face of the camera, and"]
#[doc = "perpendicular to the x axis (it will also be perpendicular to the ground if the camera is upright and level).  The z axis"]
#[doc = "runs into the scene, perpendicular to both the x and y axis.  From the perspective of the camera, an object moving from"]
#[doc = "left to right is moving along the increasing x axis.  An object moving up is moving along the increasing y axis, and an object"]
#[doc = "moving away from the camera is moving along the increasing z axis."]
#[doc = ""]
#[doc = "Mathematically, the Depth coordinate system is the projection of the scene on the CMOS. If the sensor's angular field of view and"]
#[doc = "resolution are known, then an angular size can be calculated for each pixel.  This is how the conversion algorithms work.  The"]
#[doc = "dependence of this calculation on FoV and resolution is the reason that a @ref VideoStream pointer must be provided to these"]
#[doc = "functions.  The @ref VideoStream pointer is used to determine parameters for the specific points to be converted."]
#[doc = ""]
#[doc = "Since Depth coordinates are a projective, the apparent size of objects in depth coordinates (measured in pixels)"]
#[doc = "will increase as an object moves closer to the sensor.  The size of objects in the World coordinate system is independent of"]
#[doc = "distance from the sensor."]
#[doc = ""]
#[doc = "Note that converting from Depth to World coordinates is relatively expensive computationally.  It is generally not practical to convert"]
#[doc = "the entire raw depth map to World coordinates.  A better approach is to have your computer vision algorithm work in Depth"]
#[doc = "coordinates for as long as possible, and only converting a few specific points to World coordinates right before output."]
#[doc = ""]
#[doc = "Note that when converting from Depth to World or vice versa, the Z value remains the same."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openni_CoordinateConverter {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_openni_CoordinateConverter() {
    assert_eq!(
        ::std::mem::size_of::<openni_CoordinateConverter>(),
        1usize,
        concat!("Size of: ", stringify!(openni_CoordinateConverter))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_CoordinateConverter>(),
        1usize,
        concat!("Alignment of ", stringify!(openni_CoordinateConverter))
    );
}
#[doc = " The Recorder class is used to record streams to an ONI file."]
#[doc = ""]
#[doc = " After a recorder is instantiated, it must be initialized with a specific filename where"]
#[doc = " the recording will be stored.  The recorder is then attached to one or more streams.  Once"]
#[doc = " this is complete, the recorder can be told to start recording.  The recorder will store"]
#[doc = " every frame from every stream to the specified file.  Later, this file can be used to"]
#[doc = " initialize a file Device, and used to play back the same data that was recorded."]
#[doc = ""]
#[doc = " Opening a file device is done by passing its path as the uri to the @ref Device::open() method."]
#[doc = ""]
#[doc = " @see PlaybackControl for options available to play a reorded file."]
#[doc = ""]
#[repr(C)]
#[derive(Debug)]
pub struct openni_Recorder {
    pub m_recorder: OniRecorderHandle,
}
#[test]
fn bindgen_test_layout_openni_Recorder() {
    assert_eq!(
        ::std::mem::size_of::<openni_Recorder>(),
        8usize,
        concat!("Size of: ", stringify!(openni_Recorder))
    );
    assert_eq!(
        ::std::mem::align_of::<openni_Recorder>(),
        8usize,
        concat!("Alignment of ", stringify!(openni_Recorder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<openni_Recorder>())).m_recorder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openni_Recorder),
            "::",
            stringify!(m_recorder)
        )
    );
}
pub const nite_JointType_JOINT_HEAD: nite_JointType = 0;
pub const nite_JointType_JOINT_NECK: nite_JointType = 1;
pub const nite_JointType_JOINT_LEFT_SHOULDER: nite_JointType = 2;
pub const nite_JointType_JOINT_RIGHT_SHOULDER: nite_JointType = 3;
pub const nite_JointType_JOINT_LEFT_ELBOW: nite_JointType = 4;
pub const nite_JointType_JOINT_RIGHT_ELBOW: nite_JointType = 5;
pub const nite_JointType_JOINT_LEFT_HAND: nite_JointType = 6;
pub const nite_JointType_JOINT_RIGHT_HAND: nite_JointType = 7;
pub const nite_JointType_JOINT_TORSO: nite_JointType = 8;
pub const nite_JointType_JOINT_LEFT_HIP: nite_JointType = 9;
pub const nite_JointType_JOINT_RIGHT_HIP: nite_JointType = 10;
pub const nite_JointType_JOINT_LEFT_KNEE: nite_JointType = 11;
pub const nite_JointType_JOINT_RIGHT_KNEE: nite_JointType = 12;
pub const nite_JointType_JOINT_LEFT_FOOT: nite_JointType = 13;
pub const nite_JointType_JOINT_RIGHT_FOOT: nite_JointType = 14;
#[doc = " Available joints in skeleton"]
pub type nite_JointType = ::std::os::raw::c_uint;
#[doc = " No skeleton - skeleton was not requested"]
pub const nite_SkeletonState_SKELETON_NONE: nite_SkeletonState = 0;
#[doc = " Skeleton requested, but still unavailable"]
pub const nite_SkeletonState_SKELETON_CALIBRATING: nite_SkeletonState = 1;
#[doc = " Skeleton available"]
pub const nite_SkeletonState_SKELETON_TRACKED: nite_SkeletonState = 2;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const nite_SkeletonState_SKELETON_CALIBRATION_ERROR_NOT_IN_POSE: nite_SkeletonState = 3;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const nite_SkeletonState_SKELETON_CALIBRATION_ERROR_HANDS: nite_SkeletonState = 4;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const nite_SkeletonState_SKELETON_CALIBRATION_ERROR_HEAD: nite_SkeletonState = 5;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const nite_SkeletonState_SKELETON_CALIBRATION_ERROR_LEGS: nite_SkeletonState = 6;
#[doc = " Possible reasons as to why skeleton is unavailable"]
pub const nite_SkeletonState_SKELETON_CALIBRATION_ERROR_TORSO: nite_SkeletonState = 7;
#[doc = " Possible states of the skeleton"]
pub type nite_SkeletonState = ::std::os::raw::c_uint;
pub const nite_Status_STATUS_OK: nite_Status = 0;
pub const nite_Status_STATUS_ERROR: nite_Status = 1;
pub const nite_Status_STATUS_BAD_USER_ID: nite_Status = 2;
pub const nite_Status_STATUS_OUT_OF_FLOW: nite_Status = 3;
#[doc = " Possible failure values"]
pub type nite_Status = ::std::os::raw::c_uint;
pub const nite_PoseType_POSE_PSI: nite_PoseType = 0;
pub const nite_PoseType_POSE_CROSSED_HANDS: nite_PoseType = 1;
pub type nite_PoseType = ::std::os::raw::c_uint;
pub const nite_GestureType_GESTURE_WAVE: nite_GestureType = 0;
pub const nite_GestureType_GESTURE_CLICK: nite_GestureType = 1;
pub const nite_GestureType_GESTURE_HAND_RAISE: nite_GestureType = 2;
#[doc = " Available gestures types"]
pub type nite_GestureType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_Version {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub maintenance: ::std::os::raw::c_int,
    pub build: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_nite_Version() {
    assert_eq!(
        ::std::mem::size_of::<nite_Version>(),
        16usize,
        concat!("Size of: ", stringify!(nite_Version))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Version>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_Version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nite_Version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_Version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nite_Version>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_Version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nite_Version>())).maintenance as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_Version),
            "::",
            stringify!(maintenance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nite_Version>())).build as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_Version),
            "::",
            stringify!(build)
        )
    );
}
#[doc = "Encapsulates a single point in 3D space, storing the x/y/z coordinates as floating point numbers."]
#[doc = ""]
#[doc = "Can also be used to represent a three dimensional vector."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_Point3f {
    pub _base: NitePoint3f,
}
#[test]
fn bindgen_test_layout_nite_Point3f() {
    assert_eq!(
        ::std::mem::size_of::<nite_Point3f>(),
        12usize,
        concat!("Size of: ", stringify!(nite_Point3f))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Point3f>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_Point3f))
    );
}
#[doc = "Enapsulates a geometrical plane.  The plane is defined by a single point on that plane, and a normal vector to the plane."]
#[doc = "The normal vector is represented as a Point3f."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_Plane {
    pub _base: NitePlane,
}
#[test]
fn bindgen_test_layout_nite_Plane() {
    assert_eq!(
        ::std::mem::size_of::<nite_Plane>(),
        24usize,
        concat!("Size of: ", stringify!(nite_Plane))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Plane>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_Plane))
    );
}
#[doc = "Represents a Quaternion.  The Quaternion is stored as four floating point numbers.  (The quaternions"]
#[doc = "are a number system that extends the complex number system from two dimensions to four.)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_Quaternion {
    pub _base: NiteQuaternion,
}
#[test]
fn bindgen_test_layout_nite_Quaternion() {
    assert_eq!(
        ::std::mem::size_of::<nite_Quaternion>(),
        16usize,
        concat!("Size of: ", stringify!(nite_Quaternion))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Quaternion>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_Quaternion))
    );
}
#[doc = "Represents a box in three dimensional space.  The box is represented as two points,"]
#[doc = "containing respectively its minimum and maximum x, y and z coordinate values."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_BoundingBox {
    pub _base: NiteBoundingBox,
}
#[test]
fn bindgen_test_layout_nite_BoundingBox() {
    assert_eq!(
        ::std::mem::size_of::<nite_BoundingBox>(),
        24usize,
        concat!("Size of: ", stringify!(nite_BoundingBox))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_BoundingBox>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_BoundingBox))
    );
}
#[doc = "Provides a simple array class used throughout the API. Wraps a primitive array"]
#[doc = "of objects, holding the elements and their count."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_Array<T> {
    pub m_size: ::std::os::raw::c_int,
    pub m_data: *mut T,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[doc = "UserId is a persistent ID for a specific user detected by the UserTracker algorithm."]
#[doc = "While the user is known, it will have the same ID."]
pub type nite_UserId = ::std::os::raw::c_short;
#[doc = "This class wraps the output from the NiTE Pose Detection algorithms."]
#[doc = ""]
#[doc = "NiTE provides the ability for applications to detect whether a user is in a specific pose."]
#[doc = "This is most commonly used for skeleton calibration.  The algorithm passes through a number"]
#[doc = "of different states during the process of Pose Detection."]
#[doc = ""]
#[doc = "For each user being analyzed, this class stores the pose being detected and the state of"]
#[doc = "that detection."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_PoseData {
    pub _base: NitePoseData,
}
#[test]
fn bindgen_test_layout_nite_PoseData() {
    assert_eq!(
        ::std::mem::size_of::<nite_PoseData>(),
        8usize,
        concat!("Size of: ", stringify!(nite_PoseData))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_PoseData>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_PoseData))
    );
}
#[doc = "This class stores the output from the @ref nite::UserTracker algorithm."]
#[doc = ""]
#[doc = "The basic purpose of the User Tracker algorithm is to analyze a depth frame and to locate all users in"]
#[doc = "the scene, to indicate which pixels belong to which user, and which pixels belong to the background."]
#[doc = ""]
#[doc = ""]
#[doc = "The output is in the form of a two dimensional array with the same dimensions"]
#[doc = "as the depth frame that was used as the input to UserTracker.  Each element of the"]
#[doc = "array corresponds to a single pixel from the depth map, and indicates the UserID"]
#[doc = "of the user which occupies that pixel."]
#[doc = ""]
#[doc = "The UserId value 0 is used to indicate pixels that contain no users (ie background)."]
#[doc = ""]
#[doc = "@see UserTracker for more information about this algorithm."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_UserMap {
    pub _base: NiteUserMap,
}
#[test]
fn bindgen_test_layout_nite_UserMap() {
    assert_eq!(
        ::std::mem::size_of::<nite_UserMap>(),
        24usize,
        concat!("Size of: ", stringify!(nite_UserMap))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_UserMap>(),
        8usize,
        concat!("Alignment of ", stringify!(nite_UserMap))
    );
}
#[doc = "This class provides a data structure to store the output of the Skeleton algorithm."]
#[doc = ""]
#[doc = "The basic purpose of the skeleton algorithm is to locate each of a user's joints, and"]
#[doc = "to estimate the position and orientation of each joint in space.  The output from the Skeleton algorithm is"]
#[doc = "stored as a series of SkeletonJoint objects."]
#[doc = ""]
#[doc = "@see nite::Skeleton for more information about the Skeleton algorithm."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_SkeletonJoint {
    pub _base: NiteSkeletonJoint,
}

impl nite_SkeletonJoint {
    pub fn getPosition(&self) -> NitePoint3f {
        return self._base.position;
    }
}

#[test]
fn bindgen_test_layout_nite_SkeletonJoint() {
    assert_eq!(
        ::std::mem::size_of::<nite_SkeletonJoint>(),
        40usize,
        concat!("Size of: ", stringify!(nite_SkeletonJoint))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_SkeletonJoint>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_SkeletonJoint))
    );
}
#[doc = "This is the main class for the skeleton algorithm."]
#[doc = ""]
#[doc = "The purpose of the skeleton algorithm is to analyze a user outline supplied by the User Tracker"]
#[doc = "algorithm, and to locate the position of that user's joints in space (eg knees, elbows, head, etc)."]
#[doc = "The orientation of the user's joints is also calculated.  Where joints are not visible, the algorithm"]
#[doc = "will make a best guess about the joint.  For all data calculated, confidence values are also"]
#[doc = "created to help an application understand if the algorithm is sure about the data, or if it is \"guessing\"."]
#[doc = ""]
#[doc = "Nite offers two types of skeletons algorithms.  One requires the user to assume a specific \"calibration pose\""]
#[doc = "before calibration can be attempted.  The other does not require a specific pose from the user, but will require"]
#[doc = "a few seconds to settle down as it learns a user's body shape.  The algorithm used sometimes depends on"]
#[doc = "the platform being used -- for example, the ARM version of Nite currently only offers the version that"]
#[doc = "requires a calibration pose."]
#[doc = ""]
#[doc = "All skeleton joint positions are given in \"real world\" data coordinates, using the same conventions as"]
#[doc = "OpenNI 2.0.  See the online documentation for OpenNI 2.0 for more information on the coordinate systems"]
#[doc = "used with the skeleton."]
#[doc = ""]
#[doc = "@see SkeletonJoint for the output data format of the skeleton."]
#[doc = "@see JointType enumeration for a list of all joints detected by the skeleton."]
#[doc = "@see UserTracker to understand where the input data to the skeleton comes from."]
#[doc = "@see SkeletonState enumeration for a list of possible skeleton states."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_Skeleton {
    pub _base: NiteSkeleton,
}
#[test]
fn bindgen_test_layout_nite_Skeleton() {
    assert_eq!(
        ::std::mem::size_of::<nite_Skeleton>(),
        604usize,
        concat!("Size of: ", stringify!(nite_Skeleton))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Skeleton>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_Skeleton))
    );
}
#[doc = "Provides the current information available about a specific user detected by the UserTracker."]
#[doc = ""]
#[doc = "Note that some data is provided in depth (\"projective\") coordinates, and other data is provided"]
#[doc = "in world (\"real world\") coordinates.  See the OpenNI 2.0 documentation for information on the two"]
#[doc = "coordinate systems used and how to convert between them."]
#[doc = ""]
#[doc = "@see UserTracker for more information on how this data is generated."]
#[doc = "@see Skeleton for more information on a user's skeleton"]
#[doc = "@see UserMap for information on locating a specific user in the scene."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_UserData {
    pub _base: NiteUserData,
}
#[test]
fn bindgen_test_layout_nite_UserData() {
    assert_eq!(
        ::std::mem::size_of::<nite_UserData>(),
        664usize,
        concat!("Size of: ", stringify!(nite_UserData))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_UserData>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_UserData))
    );
}
#[doc = "This class stores a snapshot of a single frame of output from the UserTracker algorithm.  This frame will"]
#[doc = "correspond to a single input depth frame.  It holds all info on users, as well as information on the floor plane."]
#[doc = ""]
#[doc = "@see @ref UserData For detailed info on specific users"]
#[doc = "@see @ref Skeleton For user skeleton data"]
#[doc = "@see @ref UserMap For user positions in the frame"]
#[doc = "@see @ref UserTracker For information on starting the user tracker algorithms to detect all of this data."]
#[doc = "@see @ref HandTrackerFrameRef for the equivalent information when hand tracking."]
#[repr(C)]
#[derive(Debug)]
pub struct nite_UserTrackerFrameRef {
    pub m_users: nite_Array<nite_UserData>,
    pub m_pFrame: *mut NiteUserTrackerFrame,
    pub m_userTrackerHandle: NiteUserTrackerHandle,
    pub m_depthFrame: openni_VideoFrameRef,
}
#[test]
fn bindgen_test_layout_nite_UserTrackerFrameRef() {
    assert_eq!(
        ::std::mem::size_of::<nite_UserTrackerFrameRef>(),
        40usize,
        concat!("Size of: ", stringify!(nite_UserTrackerFrameRef))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_UserTrackerFrameRef>(),
        8usize,
        concat!("Alignment of ", stringify!(nite_UserTrackerFrameRef))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_UserTrackerFrameRef>())).m_users as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_UserTrackerFrameRef),
            "::",
            stringify!(m_users)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_UserTrackerFrameRef>())).m_pFrame as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_UserTrackerFrameRef),
            "::",
            stringify!(m_pFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_UserTrackerFrameRef>())).m_userTrackerHandle as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_UserTrackerFrameRef),
            "::",
            stringify!(m_userTrackerHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_UserTrackerFrameRef>())).m_depthFrame as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_UserTrackerFrameRef),
            "::",
            stringify!(m_depthFrame)
        )
    );
}
#[doc = "This is the main object of the User Tracker algorithm.  It provides access to one half of the"]
#[doc = "algorithms provided by NiTE.  Scene segmentation, skeleton, floor plane detection, and pose"]
#[doc = "detection are all provided by this class."]
#[doc = ""]
#[doc = "The first purpose of the User Tracker algorithm is to find all of the active users in a specific scene."]
#[doc = "It individually tracks each human it finds, and provides the means to seperate their outline from"]
#[doc = "each other and from the background.  Once the scene has been segmented, the User Tracker is also used to initiate Skeleton"]
#[doc = "Tracking and Pose Detection algorithms."]
#[doc = ""]
#[doc = "Each user is provided an ID as they are detected.  The user ID remains constant as long as the"]
#[doc = "user remains in the frame.  If a user leaves the field of view of the camera, or tracking of that"]
#[doc = "user is otherwise lost, the user may have a different ID when he is detected again.  There is"]
#[doc = "currently no mechanism that provides persistant recognition of individuals when they are not being"]
#[doc = "actively tracking.  If this functionality is desired, it will need to be implimented at the"]
#[doc = "application level."]
#[doc = ""]
#[doc = "A listener class is provided to allow event based interaction with this algorithm."]
#[doc = ""]
#[doc = "@see UserMap for the output format of the User Tracker algorithm"]
#[doc = "@see UserData for additional data output by this format"]
#[doc = "@see Skeleton if you are also interested in tracking a user's skeleton"]
#[doc = "@see NiTE for a couple of static functions that must be run before User Tracker can be used"]
#[doc = "@see @ref HandTracker for Gesture and Hand tracking algorithms."]
#[repr(C)]
#[derive(Debug)]
pub struct nite_UserTracker {
    pub m_userTrackerHandle: NiteUserTrackerHandle,
}
#[repr(C)]
pub struct nite_UserTracker_NewFrameListener__bindgen_vtable(::std::os::raw::c_void);
#[doc = "This is a listener class that is used to react to events generated by the @ref UserTracker class."]
#[doc = ""]
#[doc = "To use this class, you must derive a class from it that implements the @ref onNewFrame() function.  This"]
#[doc = "is the function that will be called when an event is generated."]
#[doc = ""]
#[doc = "Create a new instance of your derived class.  Then, use the @ref UserTracker::addNewFrameListener()"]
#[doc = "function to add the listener to the @ref UserTracker.  When that @ref UserTracker generates an onNewFrame event, \\"]
#[doc = "the specified callback function will be called."]
#[doc = ""]
#[doc = "The onNewFrame event is currently the only event type that this listener is designed to work with."]
#[doc = ""]
#[doc = "@see @ref UserTracker for the source of this listener's events."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_UserTracker_NewFrameListener {
    pub vtable_: *const nite_UserTracker_NewFrameListener__bindgen_vtable,
    pub m_userTrackerCallbacks: NiteUserTrackerCallbacks,
    pub m_pUserTracker: *mut nite_UserTracker,
}
#[test]
fn bindgen_test_layout_nite_UserTracker_NewFrameListener() {
    assert_eq!(
        ::std::mem::size_of::<nite_UserTracker_NewFrameListener>(),
        24usize,
        concat!("Size of: ", stringify!(nite_UserTracker_NewFrameListener))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_UserTracker_NewFrameListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(nite_UserTracker_NewFrameListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_UserTracker_NewFrameListener>())).m_userTrackerCallbacks
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_UserTracker_NewFrameListener),
            "::",
            stringify!(m_userTrackerCallbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_UserTracker_NewFrameListener>())).m_pUserTracker as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_UserTracker_NewFrameListener),
            "::",
            stringify!(m_pUserTracker)
        )
    );
}
#[test]
fn bindgen_test_layout_nite_UserTracker() {
    assert_eq!(
        ::std::mem::size_of::<nite_UserTracker>(),
        8usize,
        concat!("Size of: ", stringify!(nite_UserTracker))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_UserTracker>(),
        8usize,
        concat!("Alignment of ", stringify!(nite_UserTracker))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_UserTracker>())).m_userTrackerHandle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_UserTracker),
            "::",
            stringify!(m_userTrackerHandle)
        )
    );
}
pub type nite_HandId = ::std::os::raw::c_short;
#[doc = "This class stores data on a gesture that is being detected.  \"Gestures\" in this context indicate"]
#[doc = "gestures detected directly from the depthmap, so there are no handpoint ID's at this stage.  Objects"]
#[doc = "of this class store the data for a specific instance of a specific gesture."]
#[doc = ""]
#[doc = "The type, position in space, and completion status of the gesture can all be tracked."]
#[doc = ""]
#[doc = "All positions are given in \"real world\" coordinates.  See the OpenNI 2.0 documentation for more information"]
#[doc = "on the coordinate systems used by OpenNI/NiTE."]
#[doc = ""]
#[doc = "@see @ref GestureType enumeration for a list of available hand gestures."]
#[doc = "@see @ref HandTracker for more information on using gestures."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_GestureData {
    pub _base: NiteGestureData,
}
#[test]
fn bindgen_test_layout_nite_GestureData() {
    assert_eq!(
        ::std::mem::size_of::<nite_GestureData>(),
        20usize,
        concat!("Size of: ", stringify!(nite_GestureData))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_GestureData>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_GestureData))
    );
}
#[doc = "This class stores data on a single hand during a single frame of hand detection by the @HandTracker."]
#[doc = ""]
#[doc = "It can be used to find out where the hand is in space, the hand's ID, and the tracking status."]
#[doc = ""]
#[doc = "All positions are given in \"real world\" coordinates.  See the OpenNI 2.0 documentation for more information"]
#[doc = "on the coordinate systems used by OpenNI/NiTE."]
#[doc = ""]
#[doc = "@see HandTracker for more information on hand tracking."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_HandData {
    pub _base: NiteHandData,
}
#[test]
fn bindgen_test_layout_nite_HandData() {
    assert_eq!(
        ::std::mem::size_of::<nite_HandData>(),
        20usize,
        concat!("Size of: ", stringify!(nite_HandData))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_HandData>(),
        4usize,
        concat!("Alignment of ", stringify!(nite_HandData))
    );
}
#[doc = "Snapshot of the Hand Tracker algorithm.  It contains all output from a single frame of"]
#[doc = "the Hand Tracking algorithm, which corresponds to a single input depth frame."]
#[doc = ""]
#[doc = "It holds all the hands identified at this time, as well as the detected gestures."]
#[doc = ""]
#[doc = "@see HandTracker for how this data is created"]
#[repr(C)]
#[derive(Debug)]
pub struct nite_HandTrackerFrameRef {
    pub m_pFrame: *mut NiteHandTrackerFrame,
    pub m_handTracker: NiteHandTrackerHandle,
    pub m_depthFrame: openni_VideoFrameRef,
    pub m_hands: nite_Array<nite_HandData>,
    pub m_gestures: nite_Array<nite_GestureData>,
}
#[test]
fn bindgen_test_layout_nite_HandTrackerFrameRef() {
    assert_eq!(
        ::std::mem::size_of::<nite_HandTrackerFrameRef>(),
        56usize,
        concat!("Size of: ", stringify!(nite_HandTrackerFrameRef))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_HandTrackerFrameRef>(),
        8usize,
        concat!("Alignment of ", stringify!(nite_HandTrackerFrameRef))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTrackerFrameRef>())).m_pFrame as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTrackerFrameRef),
            "::",
            stringify!(m_pFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTrackerFrameRef>())).m_handTracker as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTrackerFrameRef),
            "::",
            stringify!(m_handTracker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTrackerFrameRef>())).m_depthFrame as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTrackerFrameRef),
            "::",
            stringify!(m_depthFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTrackerFrameRef>())).m_hands as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTrackerFrameRef),
            "::",
            stringify!(m_hands)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTrackerFrameRef>())).m_gestures as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTrackerFrameRef),
            "::",
            stringify!(m_gestures)
        )
    );
}
#[doc = "This is the main object of the Hand Tracker algorithm.  It (along with @ref UserTracker) is"]
#[doc = "one of two main classes in NiTE.  All NiTE algorithms are accessable through one of these two classes."]
#[doc = ""]
#[doc = "@ref HandTracker provides access to all algorithms relates to tracking individual hands, as well as"]
#[doc = "detecting gestures in the depthmap."]
#[doc = ""]
#[doc = "The core of the hand tracking is an algorithm that finds human hands in each from of the depthmap, and"]
#[doc = "reports the position of those hands in space.  This can be used for simple detection of higher level"]
#[doc = "gestures and implimentation of gesture based user interfaces.  Unlike full body tracking algorithms,"]
#[doc = "handpoint based tracking works on users that are sitting and does not require a full body be visible."]
#[doc = ""]
#[doc = "Gesture tracking is generally used to initiate hand tracking.  It allows detection of gestures in the"]
#[doc = "raw depth map, without requiring hand points (in contrast to higher-level gestures that might be"]
#[doc = "used to impliment a UI using handpoints).  These gestures can be located in space to provide a hint"]
#[doc = "to the hand tracking algorithm on where to start tracking."]
#[doc = ""]
#[doc = "The output of the HandTracker occurs one frame at a time.  For each input depth frame, a hand tracking frame"]
#[doc = "is output with hand positions, gesture positions, etc.  A listener class is provided that allows for event"]
#[doc = "driven reaction to each new frame as it arrives."]
#[doc = ""]
#[doc = "Note that creating a HandTracker requires a valid OpenNI 2.0 Device to be initialized in order to provide"]
#[doc = "depth information.  See the OpenNI 2.0 documenation for information on connecting a device and starting"]
#[doc = "the stream of depth maps that will drive this algorithm."]
#[doc = ""]
#[doc = "@see @ref UserTracker If you want to track full body motion, skeletons, find a floor plane, or detect poses."]
#[doc = "@see @ref NiTE For a list of static functions that must be used before using HandTracker"]
#[repr(C)]
#[derive(Debug)]
pub struct nite_HandTracker {
    pub m_handTrackerHandle: NiteHandTrackerHandle,
}
#[repr(C)]
pub struct nite_HandTracker_NewFrameListener__bindgen_vtable(::std::os::raw::c_void);
#[doc = "This is a listener class that is used to react to events generated by the @ref HandTracker class."]
#[doc = ""]
#[doc = "To use this class, you must derive a class from it that implements the @ref onNewFrame() function.  This"]
#[doc = "is the function that will be called when an event is generated."]
#[doc = ""]
#[doc = "Create a new instance of your derived class.  Then, use the @ref HandTracker::addNewFrameListener()"]
#[doc = "function to add the listener to the @ref HandTracker.  When that @ref HandTracker generates an onNewFrame event, \\"]
#[doc = "the specified callback function will be called."]
#[doc = ""]
#[doc = "The onNewFrame event is currently the only event type that this listener is designed to work with."]
#[doc = ""]
#[doc = "@see @ref HandTracker for the source of this listener's events."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_HandTracker_NewFrameListener {
    pub vtable_: *const nite_HandTracker_NewFrameListener__bindgen_vtable,
    pub m_handTrackerCallbacks: NiteHandTrackerCallbacks,
    pub m_pHandTracker: *mut nite_HandTracker,
}
#[test]
fn bindgen_test_layout_nite_HandTracker_NewFrameListener() {
    assert_eq!(
        ::std::mem::size_of::<nite_HandTracker_NewFrameListener>(),
        24usize,
        concat!("Size of: ", stringify!(nite_HandTracker_NewFrameListener))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_HandTracker_NewFrameListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(nite_HandTracker_NewFrameListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTracker_NewFrameListener>())).m_handTrackerCallbacks
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTracker_NewFrameListener),
            "::",
            stringify!(m_handTrackerCallbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTracker_NewFrameListener>())).m_pHandTracker as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTracker_NewFrameListener),
            "::",
            stringify!(m_pHandTracker)
        )
    );
}
#[test]
fn bindgen_test_layout_nite_HandTracker() {
    assert_eq!(
        ::std::mem::size_of::<nite_HandTracker>(),
        8usize,
        concat!("Size of: ", stringify!(nite_HandTracker))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_HandTracker>(),
        8usize,
        concat!("Alignment of ", stringify!(nite_HandTracker))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nite_HandTracker>())).m_handTrackerHandle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nite_HandTracker),
            "::",
            stringify!(m_handTrackerHandle)
        )
    );
}
#[doc = "The NiTE class is a static entry point to the library."]
#[doc = ""]
#[doc = "All applications that expect to use the NiTE middleware should run the NiTE.initialize() function before"]
#[doc = "using any other API calls.  Before the application exits, the application should run the NiTE.shutdown() function to"]
#[doc = "properly close the API."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nite_NiTE {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_nite_NiTE() {
    assert_eq!(
        ::std::mem::size_of::<nite_NiTE>(),
        1usize,
        concat!("Size of: ", stringify!(nite_NiTE))
    );
    assert_eq!(
        ::std::mem::align_of::<nite_NiTE>(),
        1usize,
        concat!("Alignment of ", stringify!(nite_NiTE))
    );
}
extern "C" {
    pub static mut head: nite_SkeletonJoint;
}
extern "C" {
    pub static mut left_hand: nite_SkeletonJoint;
}
extern "C" {
    pub static mut right_hand: nite_SkeletonJoint;
}
extern "C" {
    pub static mut left_elbow: nite_SkeletonJoint;
}
extern "C" {
    pub static mut right_elbow: nite_SkeletonJoint;
}
extern "C" {
    #[link_name = "\u{1}_Z13startTrackingv"]
    pub fn startTracking();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[test]
fn __bindgen_test_layout_openni_Array_open0_openni_VideoMode_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<openni_Array<openni_VideoMode>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(openni_Array<openni_VideoMode>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<openni_Array<openni_VideoMode>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(openni_Array<openni_VideoMode>)
        )
    );
}
#[test]
fn __bindgen_test_layout_openni_Array_open0_openni_VideoMode_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<openni_Array<openni_VideoMode>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(openni_Array<openni_VideoMode>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<openni_Array<openni_VideoMode>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(openni_Array<openni_VideoMode>)
        )
    );
}
#[test]
fn __bindgen_test_layout_openni_Array_open0_openni_DeviceInfo_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<openni_Array<openni_DeviceInfo>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(openni_Array<openni_DeviceInfo>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<openni_Array<openni_DeviceInfo>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(openni_Array<openni_DeviceInfo>)
        )
    );
}
#[test]
fn __bindgen_test_layout_nite_Array_open0_nite_UserData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<nite_Array<nite_UserData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(nite_Array<nite_UserData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Array<nite_UserData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(nite_Array<nite_UserData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_nite_Array_open0_nite_UserData_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<nite_Array<nite_UserData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(nite_Array<nite_UserData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Array<nite_UserData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(nite_Array<nite_UserData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_nite_Array_open0_nite_HandData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<nite_Array<nite_HandData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(nite_Array<nite_HandData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Array<nite_HandData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(nite_Array<nite_HandData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_nite_Array_open0_nite_GestureData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<nite_Array<nite_GestureData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(nite_Array<nite_GestureData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Array<nite_GestureData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(nite_Array<nite_GestureData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_nite_Array_open0_nite_HandData_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<nite_Array<nite_HandData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(nite_Array<nite_HandData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Array<nite_HandData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(nite_Array<nite_HandData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_nite_Array_open0_nite_GestureData_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<nite_Array<nite_GestureData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(nite_Array<nite_GestureData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<nite_Array<nite_GestureData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(nite_Array<nite_GestureData>)
        )
    );
}
